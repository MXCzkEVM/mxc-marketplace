{
  "address": "0x0BC56f298d40217f02c211Efe64D9B3a1Bf9ee6E",
  "abi": [
    {
      "inputs": [],
      "name": "MXCMarketplace__AssetNotForSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__InvalidErc721Implementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__InvalidExpiresAt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__InvalidNftAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__InvalidOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__InvalidSeller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__NotApproveFor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__OrderExisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__OrderExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__PriceMisMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__PriceNotAllow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__SellerNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__SenderIsSeller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MXCMarketplace__UnauthorizedUser",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceInWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "OrderSuccessful",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC721_Interface",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assertPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transactions",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiresAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MXCMarketplace.Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionMarketInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "floorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ceilingPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInWei",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orderByAssetId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e8f599e531f94cddf0cee283e0bbe5d42b39177a07571f4fc0b8e36f0ce4f3a",
  "receipt": {
    "to": null,
    "from": "0x45A83F015D0265800CBC0dACe1c430E724D49cAc",
    "contractAddress": "0x0BC56f298d40217f02c211Efe64D9B3a1Bf9ee6E",
    "transactionIndex": 1,
    "gasUsed": "1963533",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000080000000000000000000000000100000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000020000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000010000",
    "blockHash": "0x737285aa077d48f49ef9dfe03486e4cf252bcce9732e84d7b6d6e8e7dfe59f30",
    "transactionHash": "0x0e8f599e531f94cddf0cee283e0bbe5d42b39177a07571f4fc0b8e36f0ce4f3a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 439331,
        "transactionHash": "0x0e8f599e531f94cddf0cee283e0bbe5d42b39177a07571f4fc0b8e36f0ce4f3a",
        "address": "0x0BC56f298d40217f02c211Efe64D9B3a1Bf9ee6E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000045a83f015d0265800cbc0dace1c430e724d49cac"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x737285aa077d48f49ef9dfe03486e4cf252bcce9732e84d7b6d6e8e7dfe59f30"
      }
    ],
    "blockNumber": 439331,
    "cumulativeGasUsed": "2125865",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "36c9e29e1a65aac683a6e2a47f6c10cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MXCMarketplace__AssetNotForSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__InvalidErc721Implementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__InvalidExpiresAt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__InvalidNftAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__InvalidOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__InvalidSeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__NotApproveFor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__OrderExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__PriceMisMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__PriceNotAllow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__SellerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__SenderIsSeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MXCMarketplace__UnauthorizedUser\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assertPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"internalType\":\"struct MXCMarketplace.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionMarketInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceilingPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderByAssetId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MXCMarketPlace.sol\":\"MXCMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MXCMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMXCCollection.sol\\\";\\n\\nerror MXCMarketplace__NotOwner();\\nerror MXCMarketplace__NotApproveFor();\\nerror MXCMarketplace__PriceNotAllow();\\nerror MXCMarketplace__InvalidExpiresAt();\\nerror MXCMarketplace__InvalidOrder();\\nerror MXCMarketplace__UnauthorizedUser();\\nerror MXCMarketplace__InvalidNftAddress();\\nerror MXCMarketplace__InvalidErc721Implementation();\\nerror MXCMarketplace__AssetNotForSale();\\nerror MXCMarketplace__InvalidSeller();\\nerror MXCMarketplace__SenderIsSeller();\\nerror MXCMarketplace__OrderExpired();\\nerror MXCMarketplace__SellerNotOwner();\\nerror MXCMarketplace__PriceMisMatch();\\nerror MXCMarketplace__OrderExisted();\\n\\ncontract MXCMarketplace is IERC721Receiver, Ownable {\\n    using Address for address;\\n\\n    struct Order {\\n        // Order ID\\n        bytes32 id;\\n        // Owner of the NFT\\n        address seller;\\n        // NFT registry address\\n        address nftAddress;\\n        // Price (in wei) for the published item\\n        uint256 price;\\n        // Time when this sale ends\\n        uint256 expiresAt;\\n    }\\n\\n    struct LatestInfo {\\n        uint256 price;\\n        uint256 transactions;\\n    }\\n\\n    struct collectionMarket {\\n        uint256 floorPrice;\\n        uint256 ceilingPrice;\\n    }\\n\\n    // collection => assetId => Order\\n    mapping(address => mapping(uint256 => Order)) public orderByAssetId;\\n    // collection => assetId => LatestInfo\\n    mapping(address => mapping(uint256 => LatestInfo)) public assertPrice;\\n    // collection => marketInfo\\n    mapping(address => collectionMarket) public collectionMarketInfo;\\n\\n    bytes4 public constant ERC721_Interface = bytes4(0x80ac58cd);\\n\\n    // EVENTS\\n    event OrderCreated(\\n        bytes32 id,\\n        uint256 indexed assetId,\\n        address indexed seller,\\n        address nftAddress,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    );\\n    event OrderCancelled(\\n        bytes32 id,\\n        uint256 indexed assetId,\\n        address indexed seller,\\n        address nftAddress\\n    );\\n    event OrderSuccessful(\\n        bytes32 id,\\n        uint256 indexed assetId,\\n        address indexed seller,\\n        address nftAddress,\\n        uint256 totalPrice,\\n        address indexed buyer\\n    );\\n\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function createOrder(\\n        address nftAddress,\\n        uint256 assetId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) external {\\n        _requireERC721(nftAddress);\\n\\n        IERC721 token = IERC721(nftAddress);\\n        address assetOwner = token.ownerOf(assetId);\\n\\n        if (\\n            msg.sender != assetOwner &&\\n            !token.isApprovedForAll(msg.sender, address(this)) &&\\n            token.getApproved(assetId) != address(this)\\n        ) {\\n            revert MXCMarketplace__NotApproveFor();\\n        }\\n\\n        if (priceInWei <= 0) {\\n            revert MXCMarketplace__PriceNotAllow();\\n        }\\n\\n        if (expiresAt <= block.timestamp + 1 minutes) {\\n            revert MXCMarketplace__InvalidExpiresAt();\\n        }\\n\\n        Order memory order = orderByAssetId[nftAddress][assetId];\\n        if (order.price > 0) {\\n            revert MXCMarketplace__OrderExisted();\\n        }\\n\\n        bytes32 orderId = keccak256(\\n            abi.encodePacked(\\n                block.timestamp,\\n                assetOwner,\\n                assetId,\\n                nftAddress,\\n                priceInWei\\n            )\\n        );\\n\\n        orderByAssetId[nftAddress][assetId] = Order({\\n            id: orderId,\\n            seller: assetOwner,\\n            nftAddress: nftAddress,\\n            price: priceInWei,\\n            expiresAt: expiresAt\\n        });\\n\\n        emit OrderCreated(\\n            orderId,\\n            assetId,\\n            assetOwner,\\n            nftAddress,\\n            priceInWei,\\n            expiresAt\\n        );\\n    }\\n\\n    function cancelOrder(\\n        address nftAddress,\\n        uint256 assetId\\n    ) external returns (Order memory) {\\n        address sender = _msgSender();\\n        Order memory order = orderByAssetId[nftAddress][assetId];\\n\\n        if (order.id == 0) {\\n            revert MXCMarketplace__InvalidOrder();\\n        }\\n        // can only be canceled by seller or the contract owner\\n        if (order.seller != sender && sender != owner()) {\\n            revert MXCMarketplace__UnauthorizedUser();\\n        }\\n\\n        bytes32 orderId = order.id;\\n        address orderSeller = order.seller;\\n        address orderNftAddress = order.nftAddress;\\n        delete orderByAssetId[nftAddress][assetId];\\n\\n        emit OrderCancelled(orderId, assetId, orderSeller, orderNftAddress);\\n\\n        return order;\\n    }\\n\\n    function executeOrder(\\n        address nftAddress,\\n        uint256 assetId\\n    ) external payable {\\n        _requireERC721(nftAddress);\\n        IMXCCollection mxcToken = IMXCCollection(nftAddress);\\n        address sender = _msgSender();\\n        Order memory order = orderByAssetId[nftAddress][assetId];\\n\\n        if (order.id == 0) {\\n            revert MXCMarketplace__AssetNotForSale();\\n        }\\n        if (order.seller == address(0)) {\\n            revert MXCMarketplace__InvalidSeller();\\n        }\\n        if (order.seller == sender) {\\n            revert MXCMarketplace__SenderIsSeller();\\n        }\\n        if (block.timestamp >= order.expiresAt) {\\n            revert MXCMarketplace__OrderExpired();\\n        }\\n        if (order.seller != mxcToken.ownerOf(assetId)) {\\n            revert MXCMarketplace__SellerNotOwner();\\n        }\\n        if (msg.value != order.price) {\\n            revert MXCMarketplace__PriceMisMatch();\\n        }\\n\\n        delete orderByAssetId[nftAddress][assetId];\\n\\n        // send royalty fee to nft creator\\n        (uint256 royaltyAmount, address royaltyRecipient) = mxcToken\\n            .royaltyInfo(order.price);\\n\\n        payable(royaltyRecipient).transfer(royaltyAmount);\\n        // send left to seller\\n        payable(order.seller).transfer(order.price - royaltyAmount);\\n        // send nft to buyer\\n        mxcToken.safeTransferFrom(order.seller, sender, assetId);\\n        // update new transaction\\n        uint256 transactions = assertPrice[nftAddress][assetId].transactions;\\n        assertPrice[nftAddress][assetId] = LatestInfo(\\n            order.price,\\n            transactions + 1\\n        );\\n\\n        // update collection marketplace info\\n        uint256 floorPrice = collectionMarketInfo[nftAddress].floorPrice;\\n        uint256 ceilingPrice = collectionMarketInfo[nftAddress].ceilingPrice;\\n        if (transactions == 0) {\\n            floorPrice = order.price;\\n            ceilingPrice = order.price;\\n        }\\n        if (order.price < floorPrice) {\\n            floorPrice = order.price;\\n        }\\n        if (order.price > ceilingPrice) {\\n            ceilingPrice = order.price;\\n        }\\n        collectionMarketInfo[nftAddress] = collectionMarket(\\n            floorPrice,\\n            ceilingPrice\\n        );\\n\\n        emit OrderSuccessful(\\n            order.id,\\n            assetId,\\n            order.seller,\\n            nftAddress,\\n            order.price,\\n            sender\\n        );\\n    }\\n\\n    function _requireERC721(address nftAddress) internal view {\\n        if (!nftAddress.isContract()) {\\n            revert MXCMarketplace__InvalidNftAddress();\\n        }\\n\\n        IERC721 nftRegistry = IERC721(nftAddress);\\n        if (!nftRegistry.supportsInterface(ERC721_Interface)) {\\n            revert MXCMarketplace__InvalidErc721Implementation();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2fa3e62b1e8ce5794b8876c3ee060fb274bc4af04c03a3c1813edca96a091d20\",\"license\":\"MIT\"},\"contracts/interfaces/IMXCCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IMXCCollection {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function royaltyInfo(\\n        uint256 _salePrice\\n    ) external view returns (uint256 royaltyAmount, address royaltyRecipient);\\n}\\n\",\"keccak256\":\"0x8edecd4e409c05f718d9dd0dcebb7ead97ed3753867e40b65ce2fd2d60ca91af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636f652e1a116100645780636f652e1a146101c2578063715018a6146101eb5780638da5cb5b14610202578063dc3528d61461022d578063e61f385114610249578063f2fde38b1461028a5761009c565b8063150b7a02146100a15780632b4c32be146100de57806331c0fccd1461010957806363023b1b146101475780636a20613714610185575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190611a3d565b6102b3565b6040516100d59190611b00565b60405180910390f35b3480156100ea57600080fd5b506100f36102c8565b6040516101009190611b00565b60405180910390f35b34801561011557600080fd5b50610130600480360381019061012b9190611b1b565b6102d3565b60405161013e929190611b6a565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190611b93565b610304565b60405161017c929190611b6a565b60405180910390f35b34801561019157600080fd5b506101ac60048036038101906101a79190611b1b565b610328565b6040516101b99190611c5f565b60405180910390f35b3480156101ce57600080fd5b506101e960048036038101906101e49190611c7a565b610682565b005b3480156101f757600080fd5b50610200610c76565b005b34801561020e57600080fd5b50610217610c8a565b6040516102249190611cf0565b60405180910390f35b61024760048036038101906102429190611b1b565b610cb3565b005b34801561025557600080fd5b50610270600480360381019061026b9190611b1b565b611554565b604051610281959493929190611d1a565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac9190611b93565b6115d7565b005b600063150b7a0260e01b905095945050505050565b6380ac58cd60e01b81565b6002602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b60036020528060005260406000206000915090508060000154908060010154905082565b6103306118dc565b600061033a61165a565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152505090506000801b8160000151036104a5576040517fae5e94b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161415801561051857506104e8610c8a565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561054f576040517fb9d8517c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600001519050600082602001519050600083604001519050600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905550508173ffffffffffffffffffffffffffffffffffffffff16877f0325426328de5b91ae4ad8462ad4076de4bcaf4551e81556185cacde5a425c6b858460405161066c929190611d6d565b60405180910390a3839550505050505092915050565b61068b84611662565b600084905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016106cb9190611d96565b602060405180830381865afa1580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611dc6565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156107c357508173ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b8152600401610780929190611df3565b602060405180830381865afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c19190611e54565b155b801561087457503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b815260040161081a9190611d96565b602060405180830381865afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b9190611dc6565b73ffffffffffffffffffffffffffffffffffffffff1614155b156108ab576040517f51f9063e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084116108e5576040517f9ec5b38200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603c426108f29190611eb0565b831161092a576040517fa413f30c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050600081606001511115610a92576040517fd4e72e4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004283888a89604051602001610aad959493929190611f4d565b6040516020818303038152906040528051906020012090506040518060a001604052808281526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815250600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008981526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155608082015181600401559050508273ffffffffffffffffffffffffffffffffffffffff16877f84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039838b8a8a604051610c649493929190611fac565b60405180910390a35050505050505050565b610c7e611777565b610c8860006117f5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cbc82611662565b60008290506000610ccb61165a565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152505090506000801b816000015103610e36576040517ff8da5c9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610ea0576040517f905512c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610f09576040517f694ac4af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80608001514210610f46576040517f1f15488f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610f7f9190611d96565b602060405180830381865afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190611dc6565b73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611028576040517fffde48c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606001513414611065576040517f898741fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905550506000808473ffffffffffffffffffffffffffffffffffffffff1663cef6d36884606001516040518263ffffffff1660e01b815260040161115e9190611d96565b6040805180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190612006565b915091508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156111e8573d6000803e3d6000fd5b50826020015173ffffffffffffffffffffffffffffffffffffffff166108fc8385606001516112179190612046565b9081150290604051600060405180830381858888f19350505050158015611242573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff166342842e0e846020015186896040518463ffffffff1660e01b81526004016112849392919061207a565b600060405180830381600087803b15801561129e57600080fd5b505af11580156112b2573d6000803e3d6000fd5b505050506000600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206001015490506040518060400160405280856060015181526020016001836113309190611eb0565b815250600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101559050506000600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000830361143f5785606001519150856060015190505b818660600151101561145357856060015191505b808660600151111561146757856060015190505b604051806040016040528083815260200182815250600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050508673ffffffffffffffffffffffffffffffffffffffff16866020015173ffffffffffffffffffffffffffffffffffffffff168a7f695ec315e8a642a74d450a4505eeea53df699b47a7378c7d752e97d5b16eb9bb89600001518e8b60600151604051611540939291906120b1565b60405180910390a450505050505050505050565b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154905085565b6115df611777565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361164e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116459061216b565b60405180910390fd5b611657816117f5565b50565b600033905090565b6116818173ffffffffffffffffffffffffffffffffffffffff166118b9565b6116b7576040517fd96acaaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b6040518263ffffffff1660e01b81526004016116fc9190611b00565b602060405180830381865afa158015611719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173d9190611e54565b611773576040517faf7d07c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b61177f61165a565b73ffffffffffffffffffffffffffffffffffffffff1661179d610c8a565b73ffffffffffffffffffffffffffffffffffffffff16146117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea906121d7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061196f82611944565b9050919050565b61197f81611964565b811461198a57600080fd5b50565b60008135905061199c81611976565b92915050565b6000819050919050565b6119b5816119a2565b81146119c057600080fd5b50565b6000813590506119d2816119ac565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126119fd576119fc6119d8565b5b8235905067ffffffffffffffff811115611a1a57611a196119dd565b5b602083019150836001820283011115611a3657611a356119e2565b5b9250929050565b600080600080600060808688031215611a5957611a5861193a565b5b6000611a678882890161198d565b9550506020611a788882890161198d565b9450506040611a89888289016119c3565b935050606086013567ffffffffffffffff811115611aaa57611aa961193f565b5b611ab6888289016119e7565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611afa81611ac5565b82525050565b6000602082019050611b156000830184611af1565b92915050565b60008060408385031215611b3257611b3161193a565b5b6000611b408582860161198d565b9250506020611b51858286016119c3565b9150509250929050565b611b64816119a2565b82525050565b6000604082019050611b7f6000830185611b5b565b611b8c6020830184611b5b565b9392505050565b600060208284031215611ba957611ba861193a565b5b6000611bb78482850161198d565b91505092915050565b6000819050919050565b611bd381611bc0565b82525050565b611be281611964565b82525050565b611bf1816119a2565b82525050565b60a082016000820151611c0d6000850182611bca565b506020820151611c206020850182611bd9565b506040820151611c336040850182611bd9565b506060820151611c466060850182611be8565b506080820151611c596080850182611be8565b50505050565b600060a082019050611c746000830184611bf7565b92915050565b60008060008060808587031215611c9457611c9361193a565b5b6000611ca28782880161198d565b9450506020611cb3878288016119c3565b9350506040611cc4878288016119c3565b9250506060611cd5878288016119c3565b91505092959194509250565b611cea81611964565b82525050565b6000602082019050611d056000830184611ce1565b92915050565b611d1481611bc0565b82525050565b600060a082019050611d2f6000830188611d0b565b611d3c6020830187611ce1565b611d496040830186611ce1565b611d566060830185611b5b565b611d636080830184611b5b565b9695505050505050565b6000604082019050611d826000830185611d0b565b611d8f6020830184611ce1565b9392505050565b6000602082019050611dab6000830184611b5b565b92915050565b600081519050611dc081611976565b92915050565b600060208284031215611ddc57611ddb61193a565b5b6000611dea84828501611db1565b91505092915050565b6000604082019050611e086000830185611ce1565b611e156020830184611ce1565b9392505050565b60008115159050919050565b611e3181611e1c565b8114611e3c57600080fd5b50565b600081519050611e4e81611e28565b92915050565b600060208284031215611e6a57611e6961193a565b5b6000611e7884828501611e3f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ebb826119a2565b9150611ec6836119a2565b9250828201905080821115611ede57611edd611e81565b5b92915050565b6000819050919050565b611eff611efa826119a2565b611ee4565b82525050565b60008160601b9050919050565b6000611f1d82611f05565b9050919050565b6000611f2f82611f12565b9050919050565b611f47611f4282611964565b611f24565b82525050565b6000611f598288611eee565b602082019150611f698287611f36565b601482019150611f798286611eee565b602082019150611f898285611f36565b601482019150611f998284611eee565b6020820191508190509695505050505050565b6000608082019050611fc16000830187611d0b565b611fce6020830186611ce1565b611fdb6040830185611b5b565b611fe86060830184611b5b565b95945050505050565b600081519050612000816119ac565b92915050565b6000806040838503121561201d5761201c61193a565b5b600061202b85828601611ff1565b925050602061203c85828601611db1565b9150509250929050565b6000612051826119a2565b915061205c836119a2565b925082820390508181111561207457612073611e81565b5b92915050565b600060608201905061208f6000830186611ce1565b61209c6020830185611ce1565b6120a96040830184611b5b565b949350505050565b60006060820190506120c66000830186611d0b565b6120d36020830185611ce1565b6120e06040830184611b5b565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006121556026836120e8565b9150612160826120f9565b604082019050919050565b6000602082019050818103600083015261218481612148565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006121c16020836120e8565b91506121cc8261218b565b602082019050919050565b600060208201905081810360008301526121f0816121b4565b905091905056fea26469706673582212205e5819720562768d4bb85cd751d03623de9d52dad1f066de67f15f6e36d558cf64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1311,
        "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
        "label": "orderByAssetId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)1294_storage))"
      },
      {
        "astId": 1318,
        "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
        "label": "assertPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatestInfo)1299_storage))"
      },
      {
        "astId": 1323,
        "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
        "label": "collectionMarketInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(collectionMarket)1304_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatestInfo)1299_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MXCMarketplace.LatestInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(LatestInfo)1299_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Order)1294_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MXCMarketplace.Order))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Order)1294_storage)"
      },
      "t_mapping(t_address,t_struct(collectionMarket)1304_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MXCMarketplace.collectionMarket)",
        "numberOfBytes": "32",
        "value": "t_struct(collectionMarket)1304_storage"
      },
      "t_mapping(t_uint256,t_struct(LatestInfo)1299_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MXCMarketplace.LatestInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LatestInfo)1299_storage"
      },
      "t_mapping(t_uint256,t_struct(Order)1294_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MXCMarketplace.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)1294_storage"
      },
      "t_struct(LatestInfo)1299_storage": {
        "encoding": "inplace",
        "label": "struct MXCMarketplace.LatestInfo",
        "members": [
          {
            "astId": 1296,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1298,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "transactions",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Order)1294_storage": {
        "encoding": "inplace",
        "label": "struct MXCMarketplace.Order",
        "members": [
          {
            "astId": 1285,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1287,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1289,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "nftAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1291,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1293,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "expiresAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(collectionMarket)1304_storage": {
        "encoding": "inplace",
        "label": "struct MXCMarketplace.collectionMarket",
        "members": [
          {
            "astId": 1301,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "floorPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1303,
            "contract": "contracts/MXCMarketPlace.sol:MXCMarketplace",
            "label": "ceilingPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}