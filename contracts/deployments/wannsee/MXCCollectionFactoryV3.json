{
  "address": "0x6c8ae2df0D619FF3314a61c723757521837dcFe3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "newCollectionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_royaltiesCutPerMillion",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mortgageToken",
          "type": "address"
        }
      ],
      "name": "createCollection",
      "outputs": [
        {
          "internalType": "address[2]",
          "name": "",
          "type": "address[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7142497ef8a82dd51e46f3a1850fdb7ffd743e803a2be608b0e4c79ba6fe77d9",
  "receipt": {
    "to": null,
    "from": "0x45A83F015D0265800CBC0dACe1c430E724D49cAc",
    "contractAddress": "0x6c8ae2df0D619FF3314a61c723757521837dcFe3",
    "transactionIndex": 1,
    "gasUsed": "4988535",
    "logsBloom": "0x
    "blockHash": "0xb88093bb429746ef10e8dde0799e15e12b9de11dc4d6f31fe383c3900a82f1db",
    "transactionHash": "0x7142497ef8a82dd51e46f3a1850fdb7ffd743e803a2be608b0e4c79ba6fe77d9",
    "logs": [],
    "blockNumber": 1564704,
    "cumulativeGasUsed": "5150867",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "72580ff379707324c216fccf10946bf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"newCollectionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesCutPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mortgageToken\",\"type\":\"address\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgrade/MXCCollectionFactoryV3.sol\":\"MXCCollectionFactoryV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/upgrade/ERC721Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721Upgrade is Initializable {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed id\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed id\\r\\n    );\\r\\n\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                         METADATA STORAGE/LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                      ERC721 BALANCE/OWNER STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    mapping(address => uint256) internal _balanceOf;\\r\\n\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\r\\n\\r\\n        return _balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                         ERC721 APPROVAL STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function initializeERC721(\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) public initializer {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC721 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function approve(address spender, uint256 id) public virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[id] = spender;\\r\\n\\r\\n        emit Approval(owner, spender, id);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\r\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\r\\n\\r\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == from ||\\r\\n                isApprovedForAll[from][msg.sender] ||\\r\\n                msg.sender == getApproved[id],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            _balanceOf[from]--;\\r\\n\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes calldata data\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC165 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        INTERNAL MINT/BURN LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            _balanceOf[owner]--;\\r\\n        }\\r\\n\\r\\n        delete _ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, address(0), id);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        INTERNAL SAFE MINT LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external virtual returns (bytes4) {\\r\\n        return ERC721TokenReceiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x384b0c1507ea3d9a6a6e48cb026422e275b0976902a78c67d0d0fe4276bdd193\",\"license\":\"AGPL-3.0-only\"},\"contracts/upgrade/MXCCollectionFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./MXCCollectionV3Upgrade.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\n\\r\\ncontract MXCCollectionFactoryV3 {\\r\\n\\r\\n    event newCollectionEvent(\\r\\n        address indexed collectionAddress,\\r\\n        address indexed owner\\r\\n    );\\r\\n\\r\\n    function createCollection(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _royaltiesCutPerMillion,\\r\\n        address _royaltyRecipient,\\r\\n        address _mortgageToken\\r\\n    ) external returns (address[2] memory) {\\r\\n        MXCCollectionV3Upgrade newCollection = new MXCCollectionV3Upgrade();\\r\\n        ERC1967Proxy proxy = new ERC1967Proxy(\\r\\n            address(newCollection),\\r\\n            abi.encodeWithSelector(\\r\\n                newCollection.initialize.selector,\\r\\n                msg.sender,\\r\\n                _royaltyRecipient,\\r\\n                _royaltiesCutPerMillion,\\r\\n                _name,\\r\\n                _symbol,\\r\\n                _mortgageToken\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address prxoyAddress = address(proxy);\\r\\n        emit newCollectionEvent(prxoyAddress, msg.sender);\\r\\n        return [prxoyAddress, msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x24efc0f9b5eaaabba7b107e7d94c3a20c1cb4af26d9069f0cf035411db7af638\",\"license\":\"MIT\"},\"contracts/upgrade/MXCCollectionV3Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nimport {ERC721Upgrade} from \\\"./ERC721Upgrade.sol\\\";\\r\\n\\r\\nerror MXCCollection__NotCreator();\\r\\nerror MXCCollection__NotExistToken();\\r\\nerror MXCCollection__NotAuthorize();\\r\\nerror MXCCollection__NotOwner();\\r\\n\\r\\ncontract MXCCollectionV3Upgrade is UUPSUpgradeable, ERC721Upgrade {\\r\\n    uint256 private _tokenIdCounter;\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    uint256 public royaltiesCutPerMillion;\\r\\n    address public royaltyRecipientAddress;\\r\\n    address public creator;\\r\\n    address public mortgageToken;\\r\\n    uint256 public existSupply;\\r\\n\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n    mapping(uint256 => uint256) private _mortgages;\\r\\n    error MXCCollection__MortgageTokenTransferFailed();\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        if (msg.sender != creator) revert MXCCollection__NotCreator();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _creator,\\r\\n        address _royaltyRecipient,\\r\\n        uint256 _royaltiesCutPerMillion,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _mortgageToken\\r\\n    ) public initializer {\\r\\n        royaltiesCutPerMillion = _royaltiesCutPerMillion;\\r\\n        royaltyRecipientAddress = _royaltyRecipient;\\r\\n        creator = _creator;\\r\\n        mortgageToken = _mortgageToken;\\r\\n        initializeERC721(_name, _symbol);\\r\\n\\r\\n        __UUPSUpgradeable_init();\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override {}\\r\\n\\r\\n    function royaltyInfo(\\r\\n        uint256 _salePrice\\r\\n    ) external view returns (uint256 royaltyAmount, address royaltyRecipient) {\\r\\n        if (royaltiesCutPerMillion > 0) {\\r\\n            return (\\r\\n                (_salePrice * royaltiesCutPerMillion) / 10000,\\r\\n                royaltyRecipientAddress\\r\\n            );\\r\\n        } else {\\r\\n            return (0, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mint(string memory _tokenURI, uint256 mortgage) public onlyCreator {\\r\\n        uint256 nft = _tokenIdCounter;\\r\\n        _mint(msg.sender, nft);\\r\\n        setTokenURI(nft, _tokenURI);\\r\\n        setMortgage(nft, mortgage);\\r\\n        _tokenIdCounter = _tokenIdCounter + 1;\\r\\n        totalSupply += 1;\\r\\n        existSupply += 1;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public {\\r\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\r\\n            revert MXCCollection__NotAuthorize();\\r\\n        }\\r\\n        _burn(tokenId);\\r\\n        existSupply -= 1;\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(\\r\\n        address spender,\\r\\n        uint256 tokenId\\r\\n    ) internal view returns (bool) {\\r\\n        address owner = ERC721Upgrade.ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n            isApprovedForAll[owner][spender] ||\\r\\n            getApproved[tokenId] == spender);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) public {\\r\\n        address owner = ERC721Upgrade.ownerOf(tokenId);\\r\\n        if (msg.sender != owner) revert MXCCollection__NotOwner();\\r\\n        _tokenURIs[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view override returns (string memory) {\\r\\n        if (!exists(tokenId)) {\\r\\n            revert MXCCollection__NotExistToken();\\r\\n        }\\r\\n        return _tokenURIs[tokenId];\\r\\n    }\\r\\n\\r\\n    function setMortgage(uint256 nft, uint256 _amount) private {\\r\\n      if (_amount > 0)\\r\\n        _transferFrom(msg.sender, address(this), _amount);\\r\\n      _mortgages[nft] = _amount;\\r\\n    }\\r\\n    \\r\\n    function getMortgage(uint256 nft) public view returns (uint256) {\\r\\n      return _mortgages[nft];\\r\\n    }\\r\\n\\r\\n    function recovery(uint256 nft) public {\\r\\n      require(_ownerOf[nft] == msg.sender, \\\"Not an NFT owner\\\");\\r\\n      _transferFrom(address(this), msg.sender, _mortgages[nft]);\\r\\n      _ownerOf[nft] = address(0);\\r\\n      _mortgages[nft] = 0;\\r\\n    }\\r\\n\\r\\n    function _transferFrom(address _from, address _to, uint256 _amount) private {\\r\\n      bytes4 methodId = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\r\\n      bytes memory data =  abi.encodeWithSelector(methodId, _from, _to,_amount);\\r\\n      (bool sent,) = mortgageToken.call(data);\\r\\n      if (!sent)\\r\\n        revert MXCCollection__MortgageTokenTransferFailed();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc5b42f95efe37b46b359c9c8d66761badc7c08d3e5957c3f297b85245a262186\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506159b3806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063cbb3ce611462000033575b600080fd5b6200005160048036038101906200004b919062000491565b62000069565b60405162000060919062000612565b60405180910390f35b620000736200023d565b600060405162000083906200025f565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b509050600081631a6b79f160e01b3387898c8c8a604051602401620000cb96959493929190620006da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000136906200026d565b62000143929190620007b2565b604051809103906000f08015801562000160573d6000803e3d6000fd5b50905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff59ec64249a367b8002b16800479bbc232553e6b3a132735ac8f9ca67d82cc9a60405160405180910390a360405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250935050505095945050505050565b6040518060400160405280600290602082028036833780820191505090505090565b61454680620007e783390190565b610c518062004d2d83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002e48262000299565b810181811067ffffffffffffffff82111715620003065762000305620002aa565b5b80604052505050565b60006200031b6200027b565b9050620003298282620002d9565b919050565b600067ffffffffffffffff8211156200034c576200034b620002aa565b5b620003578262000299565b9050602081019050919050565b82818337600083830152505050565b60006200038a62000384846200032e565b6200030f565b905082815260208101848484011115620003a957620003a862000294565b5b620003b684828562000364565b509392505050565b600082601f830112620003d657620003d56200028f565b5b8135620003e884826020860162000373565b91505092915050565b6000819050919050565b6200040681620003f1565b81146200041257600080fd5b50565b6000813590506200042681620003fb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000459826200042c565b9050919050565b6200046b816200044c565b81146200047757600080fd5b50565b6000813590506200048b8162000460565b92915050565b600080600080600060a08688031215620004b057620004af62000285565b5b600086013567ffffffffffffffff811115620004d157620004d06200028a565b5b620004df88828901620003be565b955050602086013567ffffffffffffffff8111156200050357620005026200028a565b5b6200051188828901620003be565b9450506040620005248882890162000415565b935050606062000537888289016200047a565b92505060806200054a888289016200047a565b9150509295509295909350565b600060029050919050565b600081905092915050565b6000819050919050565b62000582816200044c565b82525050565b600062000596838362000577565b60208301905092915050565b6000602082019050919050565b620005ba8162000557565b620005c6818462000562565b9250620005d3826200056d565b8060005b838110156200060a578151620005ee878262000588565b9650620005fb83620005a2565b925050600181019050620005d7565b505050505050565b6000604082019050620006296000830184620005af565b92915050565b6200063a816200044c565b82525050565b6200064b81620003f1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200068d57808201518184015260208101905062000670565b60008484015250505050565b6000620006a68262000651565b620006b281856200065c565b9350620006c48185602086016200066d565b620006cf8162000299565b840191505092915050565b600060c082019050620006f160008301896200062f565b6200070060208301886200062f565b6200070f604083018762000640565b818103606083015262000723818662000699565b9050818103608083015262000739818562000699565b90506200074a60a08301846200062f565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60006200077e8262000755565b6200078a818562000760565b93506200079c8185602086016200066d565b620007a78162000299565b840191505092915050565b6000604082019050620007c960008301856200062f565b8181036020830152620007dd818462000771565b9050939250505056fe60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516144cb61007b600039600081816113ca01528181611458015281816116f601528181611784015261183401526144cb6000f3fe6080604052600436106101cd5760003560e01c806342966c68116100f757806395d89b4111610095578063ce2243b411610064578063ce2243b414610677578063cef6d368146106a2578063d147c97a146106e0578063e985e9c514610709576101cd565b806395d89b41146105bd578063a22cb465146105e8578063b88d4fde14610611578063c87b56dd1461063a576101cd565b806352d1902d116100d157806352d1902d146104ed5780636352211e1461051857806370a08231146105555780638ec5920c14610592576101cd565b806342966c681461047d578063486f6c3e146104a65780634f1ef286146104d1576101cd565b8063162094c41161016f5780632b079b2e1161013e5780632b079b2e146103d7578063343def02146104005780633659cfe61461042b57806342842e0e14610454576101cd565b8063162094c41461033157806318160ddd1461035a5780631a6b79f11461038557806323b872dd146103ae576101cd565b806306fdde03116101ab57806306fdde0314610263578063081812fc1461028e578063095ea7b3146102cb5780630c82f315146102f4576101cd565b806301ffc9a7146101d257806302d05d3f1461020f578063056b01ce1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612c44565b610746565b6040516102069190612c8c565b60405180910390f35b34801561021b57600080fd5b506102246107d8565b6040516102319190612ce8565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190612e7f565b6107fe565b005b34801561026f57600080fd5b506102786108f8565b6040516102859190612f5a565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190612f7c565b610986565b6040516102c29190612ce8565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190612fd5565b6109b9565b005b34801561030057600080fd5b5061031b60048036038101906103169190612f7c565b610ba2565b6040516103289190613024565b60405180910390f35b34801561033d57600080fd5b506103586004803603810190610353919061303f565b610bbf565b005b34801561036657600080fd5b5061036f610c57565b60405161037c9190613024565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a7919061309b565b610c5d565b005b3480156103ba57600080fd5b506103d560048036038101906103d09190613160565b610e75565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190612f7c565b611274565b005b34801561040c57600080fd5b506104156113a2565b6040516104229190612ce8565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d91906131b3565b6113c8565b005b34801561046057600080fd5b5061047b60048036038101906104769190613160565b611550565b005b34801561048957600080fd5b506104a4600480360381019061049f9190612f7c565b611688565b005b3480156104b257600080fd5b506104bb6116ee565b6040516104c89190613024565b60405180910390f35b6104eb60048036038101906104e69190613281565b6116f4565b005b3480156104f957600080fd5b50610502611830565b60405161050f91906132f6565b60405180910390f35b34801561052457600080fd5b5061053f600480360381019061053a9190612f7c565b6118e9565b60405161054c9190612ce8565b60405180910390f35b34801561056157600080fd5b5061057c600480360381019061057791906131b3565b611994565b6040516105899190613024565b60405180910390f35b34801561059e57600080fd5b506105a7611a4b565b6040516105b49190612ce8565b60405180910390f35b3480156105c957600080fd5b506105d2611a71565b6040516105df9190612f5a565b60405180910390f35b3480156105f457600080fd5b5061060f600480360381019061060a919061333d565b611aff565b005b34801561061d57600080fd5b50610638600480360381019061063391906133dd565b611bfc565b005b34801561064657600080fd5b50610661600480360381019061065c9190612f7c565b611d3a565b60405161066e9190612f5a565b60405180910390f35b34801561068357600080fd5b5061068c611e1e565b6040516106999190613024565b60405180910390f35b3480156106ae57600080fd5b506106c960048036038101906106c49190612f7c565b611e24565b6040516106d7929190613465565b60405180910390f35b3480156106ec57600080fd5b506107076004803603810190610702919061348e565b611e86565b005b34801561071557600080fd5b50610730600480360381019061072b9190613506565b611fde565b60405161073d9190612c8c565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107a157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107d15750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610885576040517f62a0fdfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b549050610896338261200d565b6108a08184610bbf565b6108aa818361221f565b6001606b546108b99190613575565b606b819055506001606c60008282546108d29190613575565b925050819055506001607160008282546108ec9190613575565b92505081905550505050565b60658054610905906135d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610931906135d8565b801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ab15750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae790613655565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600060736000838152602001908152602001600020549050919050565b6000610bca836118e9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c31576040517f11e7e2df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81607260008581526020019081526020016000209081610c519190613821565b50505050565b606c5481565b60008060019054906101000a900460ff16159050808015610c8e5750600160008054906101000a900460ff1660ff16105b80610cbb5750610c9d30612250565b158015610cba5750600160008054906101000a900460ff1660ff16145b5b610cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf190613965565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610d37576001600060016101000a81548160ff0219169083151502179055505b84606d8190555085606e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086606f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e0b8484611e86565b610e13612273565b8015610e6c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610e6391906139cd565b60405180910390a15b50505050505050565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90613a34565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90613aa0565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110455750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806110ae57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6110ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e490613655565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130c90613b0c565b60405180910390fd5b611333303360736000858152602001908152602001600020546122c4565b60006067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000607360008381526020019081526020016000208190555050565b606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144d90613b9e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661149561242e565b73ffffffffffffffffffffffffffffffffffffffff16146114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e290613c30565b60405180910390fd5b6114f481612485565b61154d81600067ffffffffffffffff81111561151357611512612d1e565b5b6040519080825280601f01601f1916602001820160405280156115455781602001600182028036833780820191505090505b506000612488565b50565b61155b838383610e75565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611644575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b81526004016115e093929190613c87565b6020604051808303816000875af11580156115ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116239190613ce6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167a90613d5f565b60405180910390fd5b505050565b61169233826125f6565b6116c8576040517ff11def0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116d181612736565b6001607160008282546116e49190613d7f565b9250508190555050565b60715481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603611782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177990613b9e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166117c161242e565b73ffffffffffffffffffffffffffffffffffffffff1614611817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180e90613c30565b60405180910390fd5b61182082612485565b61182c82826001612488565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b790613e25565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff160361198f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198690613e91565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90613efd565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60668054611a7e906135d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611aaa906135d8565b8015611af75780601f10611acc57610100808354040283529160200191611af7565b820191906000526020600020905b815481529060010190602001808311611ada57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bf09190612c8c565b60405180910390a35050565b611c07858585610e75565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611cf4575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611c90959493929190613f4a565b6020604051808303816000875af1158015611caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190613ce6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a90613d5f565b60405180910390fd5b5050505050565b6060611d45826128f9565b611d7b576040517f661a032000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607260008381526020019081526020016000208054611d99906135d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc5906135d8565b8015611e125780601f10611de757610100808354040283529160200191611e12565b820191906000526020600020905b815481529060010190602001808311611df557829003601f168201915b50505050509050919050565b606d5481565b6000806000606d541115611e7957612710606d5484611e439190613f98565b611e4d9190614009565b606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150611e81565b600080915091505b915091565b60008060019054906101000a900460ff16159050808015611eb75750600160008054906101000a900460ff1660ff16105b80611ee45750611ec630612250565b158015611ee35750600160008054906101000a900460ff1660ff16145b5b611f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1a90613965565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611f60576001600060016101000a81548160ff0219169083151502179055505b8260659081611f6f9190613821565b508160669081611f7f9190613821565b508015611fd95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611fd091906139cd565b60405180910390a15b505050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361207c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207390613aa0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590614086565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000811115612234576122333330836122c4565b5b8060736000848152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b990614118565b60405180910390fd5b565b60007f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b905060008185858560405160240161230193929190614138565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516123a991906141b6565b6000604051808303816000865af19150503d80600081146123e6576040519150601f19603f3d011682016040523d82523d6000602084013e6123eb565b606091505b5050905080612426576040517f6ca77ec200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b600061245c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61293a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b50565b6124b47f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612944565b60000160009054906101000a900460ff16156124d8576124d38361294e565b6125f1565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561254057506040513d601f19601f8201168201806040525081019061253d91906141f9565b60015b61257f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257690614298565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146125e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125db9061432a565b60405180910390fd5b506125f0838383612a07565b5b505050565b600080612602836118e9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806126c45750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b8061272d57508373ffffffffffffffffffffffffffffffffffffffff166069600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d490613e91565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff1661291b836118e9565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000819050919050565b6000819050919050565b61295781612250565b612996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298d906143bc565b60405180910390fd5b806129c37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61293a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612a1083612a33565b600082511180612a1d5750805b15612a2e57612a2c8383612a82565b505b505050565b612a3c8161294e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612a8d83612250565b612acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac39061444e565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612af491906141b6565b600060405180830381855af49150503d8060008114612b2f576040519150601f19603f3d011682016040523d82523d6000602084013e612b34565b606091505b5091509150612b5c828260405180606001604052806027815260200161446f60279139612b66565b9250505092915050565b60608315612b7657829050612b81565b612b808383612b88565b5b9392505050565b600082511115612b9b5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcf9190612f5a565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c2181612bec565b8114612c2c57600080fd5b50565b600081359050612c3e81612c18565b92915050565b600060208284031215612c5a57612c59612be2565b5b6000612c6884828501612c2f565b91505092915050565b60008115159050919050565b612c8681612c71565b82525050565b6000602082019050612ca16000830184612c7d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cd282612ca7565b9050919050565b612ce281612cc7565b82525050565b6000602082019050612cfd6000830184612cd9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d5682612d0d565b810181811067ffffffffffffffff82111715612d7557612d74612d1e565b5b80604052505050565b6000612d88612bd8565b9050612d948282612d4d565b919050565b600067ffffffffffffffff821115612db457612db3612d1e565b5b612dbd82612d0d565b9050602081019050919050565b82818337600083830152505050565b6000612dec612de784612d99565b612d7e565b905082815260208101848484011115612e0857612e07612d08565b5b612e13848285612dca565b509392505050565b600082601f830112612e3057612e2f612d03565b5b8135612e40848260208601612dd9565b91505092915050565b6000819050919050565b612e5c81612e49565b8114612e6757600080fd5b50565b600081359050612e7981612e53565b92915050565b60008060408385031215612e9657612e95612be2565b5b600083013567ffffffffffffffff811115612eb457612eb3612be7565b5b612ec085828601612e1b565b9250506020612ed185828601612e6a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f15578082015181840152602081019050612efa565b60008484015250505050565b6000612f2c82612edb565b612f368185612ee6565b9350612f46818560208601612ef7565b612f4f81612d0d565b840191505092915050565b60006020820190508181036000830152612f748184612f21565b905092915050565b600060208284031215612f9257612f91612be2565b5b6000612fa084828501612e6a565b91505092915050565b612fb281612cc7565b8114612fbd57600080fd5b50565b600081359050612fcf81612fa9565b92915050565b60008060408385031215612fec57612feb612be2565b5b6000612ffa85828601612fc0565b925050602061300b85828601612e6a565b9150509250929050565b61301e81612e49565b82525050565b60006020820190506130396000830184613015565b92915050565b6000806040838503121561305657613055612be2565b5b600061306485828601612e6a565b925050602083013567ffffffffffffffff81111561308557613084612be7565b5b61309185828601612e1b565b9150509250929050565b60008060008060008060c087890312156130b8576130b7612be2565b5b60006130c689828a01612fc0565b96505060206130d789828a01612fc0565b95505060406130e889828a01612e6a565b945050606087013567ffffffffffffffff81111561310957613108612be7565b5b61311589828a01612e1b565b935050608087013567ffffffffffffffff81111561313657613135612be7565b5b61314289828a01612e1b565b92505060a061315389828a01612fc0565b9150509295509295509295565b60008060006060848603121561317957613178612be2565b5b600061318786828701612fc0565b935050602061319886828701612fc0565b92505060406131a986828701612e6a565b9150509250925092565b6000602082840312156131c9576131c8612be2565b5b60006131d784828501612fc0565b91505092915050565b600067ffffffffffffffff8211156131fb576131fa612d1e565b5b61320482612d0d565b9050602081019050919050565b600061322461321f846131e0565b612d7e565b9050828152602081018484840111156132405761323f612d08565b5b61324b848285612dca565b509392505050565b600082601f83011261326857613267612d03565b5b8135613278848260208601613211565b91505092915050565b6000806040838503121561329857613297612be2565b5b60006132a685828601612fc0565b925050602083013567ffffffffffffffff8111156132c7576132c6612be7565b5b6132d385828601613253565b9150509250929050565b6000819050919050565b6132f0816132dd565b82525050565b600060208201905061330b60008301846132e7565b92915050565b61331a81612c71565b811461332557600080fd5b50565b60008135905061333781613311565b92915050565b6000806040838503121561335457613353612be2565b5b600061336285828601612fc0565b925050602061337385828601613328565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261339d5761339c612d03565b5b8235905067ffffffffffffffff8111156133ba576133b961337d565b5b6020830191508360018202830111156133d6576133d5613382565b5b9250929050565b6000806000806000608086880312156133f9576133f8612be2565b5b600061340788828901612fc0565b955050602061341888828901612fc0565b945050604061342988828901612e6a565b935050606086013567ffffffffffffffff81111561344a57613449612be7565b5b61345688828901613387565b92509250509295509295909350565b600060408201905061347a6000830185613015565b6134876020830184612cd9565b9392505050565b600080604083850312156134a5576134a4612be2565b5b600083013567ffffffffffffffff8111156134c3576134c2612be7565b5b6134cf85828601612e1b565b925050602083013567ffffffffffffffff8111156134f0576134ef612be7565b5b6134fc85828601612e1b565b9150509250929050565b6000806040838503121561351d5761351c612be2565b5b600061352b85828601612fc0565b925050602061353c85828601612fc0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061358082612e49565b915061358b83612e49565b92508282019050808211156135a3576135a2613546565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135f057607f821691505b602082108103613603576136026135a9565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061363f600e83612ee6565b915061364a82613609565b602082019050919050565b6000602082019050818103600083015261366e81613632565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261369a565b6136e1868361369a565b95508019841693508086168417925050509392505050565b6000819050919050565b600061371e61371961371484612e49565b6136f9565b612e49565b9050919050565b6000819050919050565b61373883613703565b61374c61374482613725565b8484546136a7565b825550505050565b600090565b613761613754565b61376c81848461372f565b505050565b5b8181101561379057613785600082613759565b600181019050613772565b5050565b601f8211156137d5576137a681613675565b6137af8461368a565b810160208510156137be578190505b6137d26137ca8561368a565b830182613771565b50505b505050565b600082821c905092915050565b60006137f8600019846008026137da565b1980831691505092915050565b600061381183836137e7565b9150826002028217905092915050565b61382a82612edb565b67ffffffffffffffff81111561384357613842612d1e565b5b61384d82546135d8565b613858828285613794565b600060209050601f83116001811461388b5760008415613879578287015190505b6138838582613805565b8655506138eb565b601f19841661389986613675565b60005b828110156138c15784890151825560018201915060208501945060208101905061389c565b868310156138de57848901516138da601f8916826137e7565b8355505b6001600288020188555050505b505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061394f602e83612ee6565b915061395a826138f3565b604082019050919050565b6000602082019050818103600083015261397e81613942565b9050919050565b6000819050919050565b600060ff82169050919050565b60006139b76139b26139ad84613985565b6136f9565b61398f565b9050919050565b6139c78161399c565b82525050565b60006020820190506139e260008301846139be565b92915050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000613a1e600a83612ee6565b9150613a29826139e8565b602082019050919050565b60006020820190508181036000830152613a4d81613a11565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000613a8a601183612ee6565b9150613a9582613a54565b602082019050919050565b60006020820190508181036000830152613ab981613a7d565b9050919050565b7f4e6f7420616e204e4654206f776e657200000000000000000000000000000000600082015250565b6000613af6601083612ee6565b9150613b0182613ac0565b602082019050919050565b60006020820190508181036000830152613b2581613ae9565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613b88602c83612ee6565b9150613b9382613b2c565b604082019050919050565b60006020820190508181036000830152613bb781613b7b565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613c1a602c83612ee6565b9150613c2582613bbe565b604082019050919050565b60006020820190508181036000830152613c4981613c0d565b9050919050565b600082825260208201905092915050565b50565b6000613c71600083613c50565b9150613c7c82613c61565b600082019050919050565b6000608082019050613c9c6000830186612cd9565b613ca96020830185612cd9565b613cb66040830184613015565b8181036060830152613cc781613c64565b9050949350505050565b600081519050613ce081612c18565b92915050565b600060208284031215613cfc57613cfb612be2565b5b6000613d0a84828501613cd1565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000613d49601083612ee6565b9150613d5482613d13565b602082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b6000613d8a82612e49565b9150613d9583612e49565b9250828203905081811115613dad57613dac613546565b5b92915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613e0f603883612ee6565b9150613e1a82613db3565b604082019050919050565b60006020820190508181036000830152613e3e81613e02565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000613e7b600a83612ee6565b9150613e8682613e45565b602082019050919050565b60006020820190508181036000830152613eaa81613e6e565b9050919050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b6000613ee7600c83612ee6565b9150613ef282613eb1565b602082019050919050565b60006020820190508181036000830152613f1681613eda565b9050919050565b6000613f298385613c50565b9350613f36838584612dca565b613f3f83612d0d565b840190509392505050565b6000608082019050613f5f6000830188612cd9565b613f6c6020830187612cd9565b613f796040830186613015565b8181036060830152613f8c818486613f1d565b90509695505050505050565b6000613fa382612e49565b9150613fae83612e49565b9250828202613fbc81612e49565b91508282048414831517613fd357613fd2613546565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061401482612e49565b915061401f83612e49565b92508261402f5761402e613fda565b5b828204905092915050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000614070600e83612ee6565b915061407b8261403a565b602082019050919050565b6000602082019050818103600083015261409f81614063565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614102602b83612ee6565b915061410d826140a6565b604082019050919050565b60006020820190508181036000830152614131816140f5565b9050919050565b600060608201905061414d6000830186612cd9565b61415a6020830185612cd9565b6141676040830184613015565b949350505050565b600081519050919050565b600081905092915050565b60006141908261416f565b61419a818561417a565b93506141aa818560208601612ef7565b80840191505092915050565b60006141c28284614185565b915081905092915050565b6141d6816132dd565b81146141e157600080fd5b50565b6000815190506141f3816141cd565b92915050565b60006020828403121561420f5761420e612be2565b5b600061421d848285016141e4565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614282602e83612ee6565b915061428d82614226565b604082019050919050565b600060208201905081810360008301526142b181614275565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614314602983612ee6565b915061431f826142b8565b604082019050919050565b6000602082019050818103600083015261434381614307565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006143a6602d83612ee6565b91506143b18261434a565b604082019050919050565b600060208201905081810360008301526143d581614399565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614438602683612ee6565b9150614443826143dc565b604082019050919050565b600060208201905081810360008301526144678161442b565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122088fbe7379c41a3370886db8cc28a2b0ed348addf4011e5bbf74c35d53ed0742564736f6c63430008120033608060405260405162000c5138038062000c51833981810160405281019062000029919062000580565b6200003d828260006200004560201b60201c565b5050620007d7565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c2a60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000164906200066d565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006dc565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031a5760008351036200031157620002ce856200027d60201b60201c565b62000310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003079062000745565b60405180910390fd5b5b8290506200032d565b6200032c83836200033560201b60201c565b5b949350505050565b600082511115620003495781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037f9190620007b3565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c9826200039c565b9050919050565b620003db81620003bc565b8114620003e757600080fd5b50565b600081519050620003fb81620003d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000456826200040b565b810181811067ffffffffffffffff821117156200047857620004776200041c565b5b80604052505050565b60006200048d62000388565b90506200049b82826200044b565b919050565b600067ffffffffffffffff821115620004be57620004bd6200041c565b5b620004c9826200040b565b9050602081019050919050565b60005b83811015620004f6578082015181840152602081019050620004d9565b60008484015250505050565b6000620005196200051384620004a0565b62000481565b90508281526020810184848401111562000538576200053762000406565b5b62000545848285620004d6565b509392505050565b600082601f83011262000565576200056462000401565b5b81516200057784826020860162000502565b91505092915050565b600080604083850312156200059a576200059962000392565b5b6000620005aa85828601620003ea565b925050602083015167ffffffffffffffff811115620005ce57620005cd62000397565b5b620005dc858286016200054d565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000655602d83620005e6565b91506200066282620005f7565b604082019050919050565b60006020820190508181036000830152620006888162000646565b9050919050565b600081519050919050565b600081905092915050565b6000620006b2826200068f565b620006be81856200069a565b9350620006d0818560208601620004d6565b80840191505092915050565b6000620006ea8284620006a5565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006200072d601d83620005e6565b91506200073a82620006f5565b602082019050919050565b6000602082019050818103600083015262000760816200071e565b9050919050565b600081519050919050565b60006200077f8262000767565b6200078b8185620005e6565b93506200079d818560208601620004d6565b620007a8816200040b565b840191505092915050565b60006020820190508181036000830152620007cf818462000772565b905092915050565b61044380620007e76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103e7602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102db565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606083156102075760008351036101ff576101bf85610064565b6101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f59061034f565b60405180910390fd5b5b829050610212565b610211838361021a565b5b949350505050565b60008251111561022d5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026191906103c4565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b60006102b58261026a565b6102bf8185610275565b93506102cf818560208601610280565b80840191505092915050565b60006102e782846102aa565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610339601d836102f2565b915061034482610303565b602082019050919050565b600060208201905081810360008301526103688161032c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103968261036f565b6103a081856102f2565b93506103b0818560208601610280565b6103b98161037a565b840191505092915050565b600060208201905081810360008301526103de818461038b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202321a362273fbe14eb135551ea4a6b9d941fd4e2086c344c380c35622a53412364736f6c63430008120033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220269ebc576f9bafed749a8585b83eae201887ebeffe84d45cdacf615779749ff264736f6c63430008120033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063cbb3ce611462000033575b600080fd5b6200005160048036038101906200004b919062000491565b62000069565b60405162000060919062000612565b60405180910390f35b620000736200023d565b600060405162000083906200025f565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b509050600081631a6b79f160e01b3387898c8c8a604051602401620000cb96959493929190620006da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000136906200026d565b62000143929190620007b2565b604051809103906000f08015801562000160573d6000803e3d6000fd5b50905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff59ec64249a367b8002b16800479bbc232553e6b3a132735ac8f9ca67d82cc9a60405160405180910390a360405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250935050505095945050505050565b6040518060400160405280600290602082028036833780820191505090505090565b61454680620007e783390190565b610c518062004d2d83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002e48262000299565b810181811067ffffffffffffffff82111715620003065762000305620002aa565b5b80604052505050565b60006200031b6200027b565b9050620003298282620002d9565b919050565b600067ffffffffffffffff8211156200034c576200034b620002aa565b5b620003578262000299565b9050602081019050919050565b82818337600083830152505050565b60006200038a62000384846200032e565b6200030f565b905082815260208101848484011115620003a957620003a862000294565b5b620003b684828562000364565b509392505050565b600082601f830112620003d657620003d56200028f565b5b8135620003e884826020860162000373565b91505092915050565b6000819050919050565b6200040681620003f1565b81146200041257600080fd5b50565b6000813590506200042681620003fb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000459826200042c565b9050919050565b6200046b816200044c565b81146200047757600080fd5b50565b6000813590506200048b8162000460565b92915050565b600080600080600060a08688031215620004b057620004af62000285565b5b600086013567ffffffffffffffff811115620004d157620004d06200028a565b5b620004df88828901620003be565b955050602086013567ffffffffffffffff8111156200050357620005026200028a565b5b6200051188828901620003be565b9450506040620005248882890162000415565b935050606062000537888289016200047a565b92505060806200054a888289016200047a565b9150509295509295909350565b600060029050919050565b600081905092915050565b6000819050919050565b62000582816200044c565b82525050565b600062000596838362000577565b60208301905092915050565b6000602082019050919050565b620005ba8162000557565b620005c6818462000562565b9250620005d3826200056d565b8060005b838110156200060a578151620005ee878262000588565b9650620005fb83620005a2565b925050600181019050620005d7565b505050505050565b6000604082019050620006296000830184620005af565b92915050565b6200063a816200044c565b82525050565b6200064b81620003f1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200068d57808201518184015260208101905062000670565b60008484015250505050565b6000620006a68262000651565b620006b281856200065c565b9350620006c48185602086016200066d565b620006cf8162000299565b840191505092915050565b600060c082019050620006f160008301896200062f565b6200070060208301886200062f565b6200070f604083018762000640565b818103606083015262000723818662000699565b9050818103608083015262000739818562000699565b90506200074a60a08301846200062f565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60006200077e8262000755565b6200078a818562000760565b93506200079c8185602086016200066d565b620007a78162000299565b840191505092915050565b6000604082019050620007c960008301856200062f565b8181036020830152620007dd818462000771565b9050939250505056fe60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516144cb61007b600039600081816113ca01528181611458015281816116f601528181611784015261183401526144cb6000f3fe6080604052600436106101cd5760003560e01c806342966c68116100f757806395d89b4111610095578063ce2243b411610064578063ce2243b414610677578063cef6d368146106a2578063d147c97a146106e0578063e985e9c514610709576101cd565b806395d89b41146105bd578063a22cb465146105e8578063b88d4fde14610611578063c87b56dd1461063a576101cd565b806352d1902d116100d157806352d1902d146104ed5780636352211e1461051857806370a08231146105555780638ec5920c14610592576101cd565b806342966c681461047d578063486f6c3e146104a65780634f1ef286146104d1576101cd565b8063162094c41161016f5780632b079b2e1161013e5780632b079b2e146103d7578063343def02146104005780633659cfe61461042b57806342842e0e14610454576101cd565b8063162094c41461033157806318160ddd1461035a5780631a6b79f11461038557806323b872dd146103ae576101cd565b806306fdde03116101ab57806306fdde0314610263578063081812fc1461028e578063095ea7b3146102cb5780630c82f315146102f4576101cd565b806301ffc9a7146101d257806302d05d3f1461020f578063056b01ce1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612c44565b610746565b6040516102069190612c8c565b60405180910390f35b34801561021b57600080fd5b506102246107d8565b6040516102319190612ce8565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190612e7f565b6107fe565b005b34801561026f57600080fd5b506102786108f8565b6040516102859190612f5a565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190612f7c565b610986565b6040516102c29190612ce8565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190612fd5565b6109b9565b005b34801561030057600080fd5b5061031b60048036038101906103169190612f7c565b610ba2565b6040516103289190613024565b60405180910390f35b34801561033d57600080fd5b506103586004803603810190610353919061303f565b610bbf565b005b34801561036657600080fd5b5061036f610c57565b60405161037c9190613024565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a7919061309b565b610c5d565b005b3480156103ba57600080fd5b506103d560048036038101906103d09190613160565b610e75565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190612f7c565b611274565b005b34801561040c57600080fd5b506104156113a2565b6040516104229190612ce8565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d91906131b3565b6113c8565b005b34801561046057600080fd5b5061047b60048036038101906104769190613160565b611550565b005b34801561048957600080fd5b506104a4600480360381019061049f9190612f7c565b611688565b005b3480156104b257600080fd5b506104bb6116ee565b6040516104c89190613024565b60405180910390f35b6104eb60048036038101906104e69190613281565b6116f4565b005b3480156104f957600080fd5b50610502611830565b60405161050f91906132f6565b60405180910390f35b34801561052457600080fd5b5061053f600480360381019061053a9190612f7c565b6118e9565b60405161054c9190612ce8565b60405180910390f35b34801561056157600080fd5b5061057c600480360381019061057791906131b3565b611994565b6040516105899190613024565b60405180910390f35b34801561059e57600080fd5b506105a7611a4b565b6040516105b49190612ce8565b60405180910390f35b3480156105c957600080fd5b506105d2611a71565b6040516105df9190612f5a565b60405180910390f35b3480156105f457600080fd5b5061060f600480360381019061060a919061333d565b611aff565b005b34801561061d57600080fd5b50610638600480360381019061063391906133dd565b611bfc565b005b34801561064657600080fd5b50610661600480360381019061065c9190612f7c565b611d3a565b60405161066e9190612f5a565b60405180910390f35b34801561068357600080fd5b5061068c611e1e565b6040516106999190613024565b60405180910390f35b3480156106ae57600080fd5b506106c960048036038101906106c49190612f7c565b611e24565b6040516106d7929190613465565b60405180910390f35b3480156106ec57600080fd5b506107076004803603810190610702919061348e565b611e86565b005b34801561071557600080fd5b50610730600480360381019061072b9190613506565b611fde565b60405161073d9190612c8c565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107a157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107d15750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610885576040517f62a0fdfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b549050610896338261200d565b6108a08184610bbf565b6108aa818361221f565b6001606b546108b99190613575565b606b819055506001606c60008282546108d29190613575565b925050819055506001607160008282546108ec9190613575565b92505081905550505050565b60658054610905906135d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610931906135d8565b801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ab15750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae790613655565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600060736000838152602001908152602001600020549050919050565b6000610bca836118e9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c31576040517f11e7e2df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81607260008581526020019081526020016000209081610c519190613821565b50505050565b606c5481565b60008060019054906101000a900460ff16159050808015610c8e5750600160008054906101000a900460ff1660ff16105b80610cbb5750610c9d30612250565b158015610cba5750600160008054906101000a900460ff1660ff16145b5b610cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf190613965565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610d37576001600060016101000a81548160ff0219169083151502179055505b84606d8190555085606e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086606f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e0b8484611e86565b610e13612273565b8015610e6c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610e6391906139cd565b60405180910390a15b50505050505050565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90613a34565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90613aa0565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110455750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806110ae57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6110ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e490613655565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130c90613b0c565b60405180910390fd5b611333303360736000858152602001908152602001600020546122c4565b60006067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000607360008381526020019081526020016000208190555050565b606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144d90613b9e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661149561242e565b73ffffffffffffffffffffffffffffffffffffffff16146114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e290613c30565b60405180910390fd5b6114f481612485565b61154d81600067ffffffffffffffff81111561151357611512612d1e565b5b6040519080825280601f01601f1916602001820160405280156115455781602001600182028036833780820191505090505b506000612488565b50565b61155b838383610e75565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611644575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b81526004016115e093929190613c87565b6020604051808303816000875af11580156115ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116239190613ce6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167a90613d5f565b60405180910390fd5b505050565b61169233826125f6565b6116c8576040517ff11def0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116d181612736565b6001607160008282546116e49190613d7f565b9250508190555050565b60715481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603611782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177990613b9e565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166117c161242e565b73ffffffffffffffffffffffffffffffffffffffff1614611817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180e90613c30565b60405180910390fd5b61182082612485565b61182c82826001612488565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b790613e25565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff160361198f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198690613e91565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90613efd565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60668054611a7e906135d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611aaa906135d8565b8015611af75780601f10611acc57610100808354040283529160200191611af7565b820191906000526020600020905b815481529060010190602001808311611ada57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bf09190612c8c565b60405180910390a35050565b611c07858585610e75565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611cf4575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611c90959493929190613f4a565b6020604051808303816000875af1158015611caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190613ce6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a90613d5f565b60405180910390fd5b5050505050565b6060611d45826128f9565b611d7b576040517f661a032000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607260008381526020019081526020016000208054611d99906135d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc5906135d8565b8015611e125780601f10611de757610100808354040283529160200191611e12565b820191906000526020600020905b815481529060010190602001808311611df557829003601f168201915b50505050509050919050565b606d5481565b6000806000606d541115611e7957612710606d5484611e439190613f98565b611e4d9190614009565b606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150611e81565b600080915091505b915091565b60008060019054906101000a900460ff16159050808015611eb75750600160008054906101000a900460ff1660ff16105b80611ee45750611ec630612250565b158015611ee35750600160008054906101000a900460ff1660ff16145b5b611f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1a90613965565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611f60576001600060016101000a81548160ff0219169083151502179055505b8260659081611f6f9190613821565b508160669081611f7f9190613821565b508015611fd95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611fd091906139cd565b60405180910390a15b505050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361207c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207390613aa0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590614086565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000811115612234576122333330836122c4565b5b8060736000848152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b990614118565b60405180910390fd5b565b60007f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b905060008185858560405160240161230193929190614138565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516123a991906141b6565b6000604051808303816000865af19150503d80600081146123e6576040519150601f19603f3d011682016040523d82523d6000602084013e6123eb565b606091505b5050905080612426576040517f6ca77ec200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b600061245c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61293a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b50565b6124b47f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612944565b60000160009054906101000a900460ff16156124d8576124d38361294e565b6125f1565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561254057506040513d601f19601f8201168201806040525081019061253d91906141f9565b60015b61257f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257690614298565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146125e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125db9061432a565b60405180910390fd5b506125f0838383612a07565b5b505050565b600080612602836118e9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806126c45750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b8061272d57508373ffffffffffffffffffffffffffffffffffffffff166069600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d490613e91565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff1661291b836118e9565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000819050919050565b6000819050919050565b61295781612250565b612996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298d906143bc565b60405180910390fd5b806129c37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61293a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612a1083612a33565b600082511180612a1d5750805b15612a2e57612a2c8383612a82565b505b505050565b612a3c8161294e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612a8d83612250565b612acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac39061444e565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612af491906141b6565b600060405180830381855af49150503d8060008114612b2f576040519150601f19603f3d011682016040523d82523d6000602084013e612b34565b606091505b5091509150612b5c828260405180606001604052806027815260200161446f60279139612b66565b9250505092915050565b60608315612b7657829050612b81565b612b808383612b88565b5b9392505050565b600082511115612b9b5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcf9190612f5a565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c2181612bec565b8114612c2c57600080fd5b50565b600081359050612c3e81612c18565b92915050565b600060208284031215612c5a57612c59612be2565b5b6000612c6884828501612c2f565b91505092915050565b60008115159050919050565b612c8681612c71565b82525050565b6000602082019050612ca16000830184612c7d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cd282612ca7565b9050919050565b612ce281612cc7565b82525050565b6000602082019050612cfd6000830184612cd9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d5682612d0d565b810181811067ffffffffffffffff82111715612d7557612d74612d1e565b5b80604052505050565b6000612d88612bd8565b9050612d948282612d4d565b919050565b600067ffffffffffffffff821115612db457612db3612d1e565b5b612dbd82612d0d565b9050602081019050919050565b82818337600083830152505050565b6000612dec612de784612d99565b612d7e565b905082815260208101848484011115612e0857612e07612d08565b5b612e13848285612dca565b509392505050565b600082601f830112612e3057612e2f612d03565b5b8135612e40848260208601612dd9565b91505092915050565b6000819050919050565b612e5c81612e49565b8114612e6757600080fd5b50565b600081359050612e7981612e53565b92915050565b60008060408385031215612e9657612e95612be2565b5b600083013567ffffffffffffffff811115612eb457612eb3612be7565b5b612ec085828601612e1b565b9250506020612ed185828601612e6a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f15578082015181840152602081019050612efa565b60008484015250505050565b6000612f2c82612edb565b612f368185612ee6565b9350612f46818560208601612ef7565b612f4f81612d0d565b840191505092915050565b60006020820190508181036000830152612f748184612f21565b905092915050565b600060208284031215612f9257612f91612be2565b5b6000612fa084828501612e6a565b91505092915050565b612fb281612cc7565b8114612fbd57600080fd5b50565b600081359050612fcf81612fa9565b92915050565b60008060408385031215612fec57612feb612be2565b5b6000612ffa85828601612fc0565b925050602061300b85828601612e6a565b9150509250929050565b61301e81612e49565b82525050565b60006020820190506130396000830184613015565b92915050565b6000806040838503121561305657613055612be2565b5b600061306485828601612e6a565b925050602083013567ffffffffffffffff81111561308557613084612be7565b5b61309185828601612e1b565b9150509250929050565b60008060008060008060c087890312156130b8576130b7612be2565b5b60006130c689828a01612fc0565b96505060206130d789828a01612fc0565b95505060406130e889828a01612e6a565b945050606087013567ffffffffffffffff81111561310957613108612be7565b5b61311589828a01612e1b565b935050608087013567ffffffffffffffff81111561313657613135612be7565b5b61314289828a01612e1b565b92505060a061315389828a01612fc0565b9150509295509295509295565b60008060006060848603121561317957613178612be2565b5b600061318786828701612fc0565b935050602061319886828701612fc0565b92505060406131a986828701612e6a565b9150509250925092565b6000602082840312156131c9576131c8612be2565b5b60006131d784828501612fc0565b91505092915050565b600067ffffffffffffffff8211156131fb576131fa612d1e565b5b61320482612d0d565b9050602081019050919050565b600061322461321f846131e0565b612d7e565b9050828152602081018484840111156132405761323f612d08565b5b61324b848285612dca565b509392505050565b600082601f83011261326857613267612d03565b5b8135613278848260208601613211565b91505092915050565b6000806040838503121561329857613297612be2565b5b60006132a685828601612fc0565b925050602083013567ffffffffffffffff8111156132c7576132c6612be7565b5b6132d385828601613253565b9150509250929050565b6000819050919050565b6132f0816132dd565b82525050565b600060208201905061330b60008301846132e7565b92915050565b61331a81612c71565b811461332557600080fd5b50565b60008135905061333781613311565b92915050565b6000806040838503121561335457613353612be2565b5b600061336285828601612fc0565b925050602061337385828601613328565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261339d5761339c612d03565b5b8235905067ffffffffffffffff8111156133ba576133b961337d565b5b6020830191508360018202830111156133d6576133d5613382565b5b9250929050565b6000806000806000608086880312156133f9576133f8612be2565b5b600061340788828901612fc0565b955050602061341888828901612fc0565b945050604061342988828901612e6a565b935050606086013567ffffffffffffffff81111561344a57613449612be7565b5b61345688828901613387565b92509250509295509295909350565b600060408201905061347a6000830185613015565b6134876020830184612cd9565b9392505050565b600080604083850312156134a5576134a4612be2565b5b600083013567ffffffffffffffff8111156134c3576134c2612be7565b5b6134cf85828601612e1b565b925050602083013567ffffffffffffffff8111156134f0576134ef612be7565b5b6134fc85828601612e1b565b9150509250929050565b6000806040838503121561351d5761351c612be2565b5b600061352b85828601612fc0565b925050602061353c85828601612fc0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061358082612e49565b915061358b83612e49565b92508282019050808211156135a3576135a2613546565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135f057607f821691505b602082108103613603576136026135a9565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061363f600e83612ee6565b915061364a82613609565b602082019050919050565b6000602082019050818103600083015261366e81613632565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261369a565b6136e1868361369a565b95508019841693508086168417925050509392505050565b6000819050919050565b600061371e61371961371484612e49565b6136f9565b612e49565b9050919050565b6000819050919050565b61373883613703565b61374c61374482613725565b8484546136a7565b825550505050565b600090565b613761613754565b61376c81848461372f565b505050565b5b8181101561379057613785600082613759565b600181019050613772565b5050565b601f8211156137d5576137a681613675565b6137af8461368a565b810160208510156137be578190505b6137d26137ca8561368a565b830182613771565b50505b505050565b600082821c905092915050565b60006137f8600019846008026137da565b1980831691505092915050565b600061381183836137e7565b9150826002028217905092915050565b61382a82612edb565b67ffffffffffffffff81111561384357613842612d1e565b5b61384d82546135d8565b613858828285613794565b600060209050601f83116001811461388b5760008415613879578287015190505b6138838582613805565b8655506138eb565b601f19841661389986613675565b60005b828110156138c15784890151825560018201915060208501945060208101905061389c565b868310156138de57848901516138da601f8916826137e7565b8355505b6001600288020188555050505b505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061394f602e83612ee6565b915061395a826138f3565b604082019050919050565b6000602082019050818103600083015261397e81613942565b9050919050565b6000819050919050565b600060ff82169050919050565b60006139b76139b26139ad84613985565b6136f9565b61398f565b9050919050565b6139c78161399c565b82525050565b60006020820190506139e260008301846139be565b92915050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000613a1e600a83612ee6565b9150613a29826139e8565b602082019050919050565b60006020820190508181036000830152613a4d81613a11565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000613a8a601183612ee6565b9150613a9582613a54565b602082019050919050565b60006020820190508181036000830152613ab981613a7d565b9050919050565b7f4e6f7420616e204e4654206f776e657200000000000000000000000000000000600082015250565b6000613af6601083612ee6565b9150613b0182613ac0565b602082019050919050565b60006020820190508181036000830152613b2581613ae9565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613b88602c83612ee6565b9150613b9382613b2c565b604082019050919050565b60006020820190508181036000830152613bb781613b7b565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613c1a602c83612ee6565b9150613c2582613bbe565b604082019050919050565b60006020820190508181036000830152613c4981613c0d565b9050919050565b600082825260208201905092915050565b50565b6000613c71600083613c50565b9150613c7c82613c61565b600082019050919050565b6000608082019050613c9c6000830186612cd9565b613ca96020830185612cd9565b613cb66040830184613015565b8181036060830152613cc781613c64565b9050949350505050565b600081519050613ce081612c18565b92915050565b600060208284031215613cfc57613cfb612be2565b5b6000613d0a84828501613cd1565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000613d49601083612ee6565b9150613d5482613d13565b602082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b6000613d8a82612e49565b9150613d9583612e49565b9250828203905081811115613dad57613dac613546565b5b92915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613e0f603883612ee6565b9150613e1a82613db3565b604082019050919050565b60006020820190508181036000830152613e3e81613e02565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000613e7b600a83612ee6565b9150613e8682613e45565b602082019050919050565b60006020820190508181036000830152613eaa81613e6e565b9050919050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b6000613ee7600c83612ee6565b9150613ef282613eb1565b602082019050919050565b60006020820190508181036000830152613f1681613eda565b9050919050565b6000613f298385613c50565b9350613f36838584612dca565b613f3f83612d0d565b840190509392505050565b6000608082019050613f5f6000830188612cd9565b613f6c6020830187612cd9565b613f796040830186613015565b8181036060830152613f8c818486613f1d565b90509695505050505050565b6000613fa382612e49565b9150613fae83612e49565b9250828202613fbc81612e49565b91508282048414831517613fd357613fd2613546565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061401482612e49565b915061401f83612e49565b92508261402f5761402e613fda565b5b828204905092915050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000614070600e83612ee6565b915061407b8261403a565b602082019050919050565b6000602082019050818103600083015261409f81614063565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614102602b83612ee6565b915061410d826140a6565b604082019050919050565b60006020820190508181036000830152614131816140f5565b9050919050565b600060608201905061414d6000830186612cd9565b61415a6020830185612cd9565b6141676040830184613015565b949350505050565b600081519050919050565b600081905092915050565b60006141908261416f565b61419a818561417a565b93506141aa818560208601612ef7565b80840191505092915050565b60006141c28284614185565b915081905092915050565b6141d6816132dd565b81146141e157600080fd5b50565b6000815190506141f3816141cd565b92915050565b60006020828403121561420f5761420e612be2565b5b600061421d848285016141e4565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614282602e83612ee6565b915061428d82614226565b604082019050919050565b600060208201905081810360008301526142b181614275565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614314602983612ee6565b915061431f826142b8565b604082019050919050565b6000602082019050818103600083015261434381614307565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006143a6602d83612ee6565b91506143b18261434a565b604082019050919050565b600060208201905081810360008301526143d581614399565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614438602683612ee6565b9150614443826143dc565b604082019050919050565b600060208201905081810360008301526144678161442b565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122088fbe7379c41a3370886db8cc28a2b0ed348addf4011e5bbf74c35d53ed0742564736f6c63430008120033608060405260405162000c5138038062000c51833981810160405281019062000029919062000580565b6200003d828260006200004560201b60201c565b5050620007d7565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c2a60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000164906200066d565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006dc565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031a5760008351036200031157620002ce856200027d60201b60201c565b62000310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003079062000745565b60405180910390fd5b5b8290506200032d565b6200032c83836200033560201b60201c565b5b949350505050565b600082511115620003495781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037f9190620007b3565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c9826200039c565b9050919050565b620003db81620003bc565b8114620003e757600080fd5b50565b600081519050620003fb81620003d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000456826200040b565b810181811067ffffffffffffffff821117156200047857620004776200041c565b5b80604052505050565b60006200048d62000388565b90506200049b82826200044b565b919050565b600067ffffffffffffffff821115620004be57620004bd6200041c565b5b620004c9826200040b565b9050602081019050919050565b60005b83811015620004f6578082015181840152602081019050620004d9565b60008484015250505050565b6000620005196200051384620004a0565b62000481565b90508281526020810184848401111562000538576200053762000406565b5b62000545848285620004d6565b509392505050565b600082601f83011262000565576200056462000401565b5b81516200057784826020860162000502565b91505092915050565b600080604083850312156200059a576200059962000392565b5b6000620005aa85828601620003ea565b925050602083015167ffffffffffffffff811115620005ce57620005cd62000397565b5b620005dc858286016200054d565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000655602d83620005e6565b91506200066282620005f7565b604082019050919050565b60006020820190508181036000830152620006888162000646565b9050919050565b600081519050919050565b600081905092915050565b6000620006b2826200068f565b620006be81856200069a565b9350620006d0818560208601620004d6565b80840191505092915050565b6000620006ea8284620006a5565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006200072d601d83620005e6565b91506200073a82620006f5565b602082019050919050565b6000602082019050818103600083015262000760816200071e565b9050919050565b600081519050919050565b60006200077f8262000767565b6200078b8185620005e6565b93506200079d818560208601620004d6565b620007a8816200040b565b840191505092915050565b60006020820190508181036000830152620007cf818462000772565b905092915050565b61044380620007e76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103e7602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102db565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606083156102075760008351036101ff576101bf85610064565b6101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f59061034f565b60405180910390fd5b5b829050610212565b610211838361021a565b5b949350505050565b60008251111561022d5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026191906103c4565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b60006102b58261026a565b6102bf8185610275565b93506102cf818560208601610280565b80840191505092915050565b60006102e782846102aa565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610339601d836102f2565b915061034482610303565b602082019050919050565b600060208201905081810360008301526103688161032c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103968261036f565b6103a081856102f2565b93506103b0818560208601610280565b6103b98161037a565b840191505092915050565b600060208201905081810360008301526103de818461038b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202321a362273fbe14eb135551ea4a6b9d941fd4e2086c344c380c35622a53412364736f6c63430008120033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220269ebc576f9bafed749a8585b83eae201887ebeffe84d45cdacf615779749ff264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}