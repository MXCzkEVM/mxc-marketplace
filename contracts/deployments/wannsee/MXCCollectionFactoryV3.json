{
  "address": "0x9AAa3294BC2F66b5241647682E2957d49AA18A42",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "newCollectionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_royaltiesCutPerMillion",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "createCollection",
      "outputs": [
        {
          "internalType": "address[2]",
          "name": "",
          "type": "address[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4224f44b8bce84626af8dfc64e6776c171213c06d91843ad4f1a186f7f03100b",
  "receipt": {
    "to": null,
    "from": "0x45A83F015D0265800CBC0dACe1c430E724D49cAc",
    "contractAddress": "0x9AAa3294BC2F66b5241647682E2957d49AA18A42",
    "transactionIndex": 1,
    "gasUsed": "4989603",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0493c6f0c5ad4c5f2fe7be6940036af1346a7a7b3affa1fafe8b4716a18d631e",
    "transactionHash": "0x4224f44b8bce84626af8dfc64e6776c171213c06d91843ad4f1a186f7f03100b",
    "logs": [],
    "blockNumber": 1566003,
    "cumulativeGasUsed": "5151935",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "8b012a0c49b25a5b5b9d957c002c5726",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"newCollectionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesCutPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgrade/MXCCollectionFactoryV3.sol\":\"MXCCollectionFactoryV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/upgrade/ERC721Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721Upgrade is Initializable {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed id\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed id\\r\\n    );\\r\\n\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                         METADATA STORAGE/LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                      ERC721 BALANCE/OWNER STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    mapping(address => uint256) internal _balanceOf;\\r\\n\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\r\\n\\r\\n        return _balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                         ERC721 APPROVAL STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function initializeERC721(\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) public initializer {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC721 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function approve(address spender, uint256 id) public virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[id] = spender;\\r\\n\\r\\n        emit Approval(owner, spender, id);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\r\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\r\\n\\r\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == from ||\\r\\n                isApprovedForAll[from][msg.sender] ||\\r\\n                msg.sender == getApproved[id],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            _balanceOf[from]--;\\r\\n\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes calldata data\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC165 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        INTERNAL MINT/BURN LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            _balanceOf[owner]--;\\r\\n        }\\r\\n\\r\\n        delete _ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, address(0), id);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        INTERNAL SAFE MINT LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                ERC721TokenReceiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                ERC721TokenReceiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external virtual returns (bytes4) {\\r\\n        return ERC721TokenReceiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x384b0c1507ea3d9a6a6e48cb026422e275b0976902a78c67d0d0fe4276bdd193\",\"license\":\"AGPL-3.0-only\"},\"contracts/upgrade/MXCCollectionFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./MXCCollectionV3Upgrade.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\n\\r\\ncontract MXCCollectionFactoryV3 {\\r\\n\\r\\n    event newCollectionEvent(\\r\\n        address indexed collectionAddress,\\r\\n        address indexed owner\\r\\n    );\\r\\n\\r\\n    function createCollection(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _royaltiesCutPerMillion,\\r\\n        address _royaltyRecipient,\\r\\n        address _collateral\\r\\n    ) external returns (address[2] memory) {\\r\\n        MXCCollectionV3Upgrade newCollection = new MXCCollectionV3Upgrade();\\r\\n        ERC1967Proxy proxy = new ERC1967Proxy(\\r\\n            address(newCollection),\\r\\n            abi.encodeWithSelector(\\r\\n                newCollection.initialize.selector,\\r\\n                msg.sender,\\r\\n                _royaltyRecipient,\\r\\n                _collateral,\\r\\n                _royaltiesCutPerMillion,\\r\\n                _name,\\r\\n                _symbol\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address prxoyAddress = address(proxy);\\r\\n        emit newCollectionEvent(prxoyAddress, msg.sender);\\r\\n        return [prxoyAddress, msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x144af220634ad6b95b18cc28deb638c0dc2e6e2836699beccf7c39c2a5e6d52e\",\"license\":\"MIT\"},\"contracts/upgrade/MXCCollectionV3Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nimport {ERC721Upgrade} from \\\"./ERC721Upgrade.sol\\\";\\r\\n\\r\\nerror MXCCollection__NotCreator();\\r\\nerror MXCCollection__NotExistToken();\\r\\nerror MXCCollection__NotAuthorize();\\r\\nerror MXCCollection__NotOwner();\\r\\n\\r\\ncontract MXCCollectionV3Upgrade is UUPSUpgradeable, ERC721Upgrade {\\r\\n    uint256 private _tokenIdCounter;\\r\\n    uint256 public totalSupply;\\r\\n    uint256 public existSupply;\\r\\n\\r\\n    uint256 public royaltiesCutPerMillion;\\r\\n    address public royaltyRecipientAddress;\\r\\n    address public creator;\\r\\n\\r\\n    // erc20 collateral address\\r\\n    address public collateral;\\r\\n\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n    mapping(uint256 => uint256) private _stakedOf;\\r\\n    error MXCCollection__StakedTokenTransferFailed();\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        if (msg.sender != creator) revert MXCCollection__NotCreator();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _creator,\\r\\n        address _royaltyRecipient,\\r\\n        address _collateral,\\r\\n        uint256 _royaltiesCutPerMillion,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) public initializer {\\r\\n        royaltiesCutPerMillion = _royaltiesCutPerMillion;\\r\\n        royaltyRecipientAddress = _royaltyRecipient;\\r\\n        creator = _creator;\\r\\n        collateral = _collateral;\\r\\n        initializeERC721(_name, _symbol);\\r\\n        __UUPSUpgradeable_init();\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override {}\\r\\n\\r\\n    function royaltyInfo(uint256 _salePrice) external view returns (uint256 royaltyAmount, address royaltyRecipient) {\\r\\n      if (royaltiesCutPerMillion > 0)\\r\\n        return ((_salePrice * royaltiesCutPerMillion) / 10000, royaltyRecipientAddress);\\r\\n      else\\r\\n        return (0, address(0));\\r\\n    }\\r\\n\\r\\n    function mint(string memory _tokenURI, uint256 stakedAmount) public onlyCreator {\\r\\n      uint256 nft = _tokenIdCounter;\\r\\n      _mint(msg.sender, nft);\\r\\n\\r\\n      setStakedBalanceOf(nft, stakedAmount);\\r\\n      setTokenURI(nft, _tokenURI);\\r\\n\\r\\n      _tokenIdCounter = _tokenIdCounter + 1;\\r\\n      totalSupply += 1;\\r\\n      existSupply += 1;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 nft) public {\\r\\n      if (!_isApprovedOrOwner(msg.sender, nft))\\r\\n        revert MXCCollection__NotAuthorize();\\r\\n      _burn(nft);\\r\\n      _burnStaked(nft);\\r\\n      existSupply -= 1;\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) internal view returns (bool) {\\r\\n      return ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n      if (!exists(tokenId))\\r\\n        revert MXCCollection__NotExistToken();\\r\\n      return _tokenURIs[tokenId];\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) public {\\r\\n        address owner = ERC721Upgrade.ownerOf(tokenId);\\r\\n        if (msg.sender != owner)\\r\\n          revert MXCCollection__NotOwner();\\r\\n        _tokenURIs[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function stakedBalanceOf(uint256 nft) public view returns (uint256) {\\r\\n      return _stakedOf[nft];\\r\\n    }\\r\\n\\r\\n    function setStakedBalanceOf(uint256 nft, uint256 amount) private {\\r\\n      if (amount > 0)\\r\\n        _transferFromStaked(msg.sender, address(this), amount);\\r\\n      _stakedOf[nft] = amount;\\r\\n    }\\r\\n\\r\\n    function _burnStaked(uint256 nft) private {\\r\\n      _transferStaked(msg.sender, _stakedOf[nft]);\\r\\n      _stakedOf[nft] = 0;\\r\\n    }\\r\\n\\r\\n    function _transferFromStaked(address _from, address _to, uint256 _amount) private {\\r\\n      bytes4 methodId = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\r\\n      bytes memory data =  abi.encodeWithSelector(methodId, _from, _to,_amount);\\r\\n      (bool sent,) = collateral.call(data);\\r\\n      if (!sent)\\r\\n        revert MXCCollection__StakedTokenTransferFailed();\\r\\n    }\\r\\n\\r\\n    function _transferStaked(address recipient, uint256 amount) private {\\r\\n      bytes4 methodId = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\r\\n      bytes memory data =  abi.encodeWithSelector(methodId, recipient, amount);\\r\\n      (bool sent,) = collateral.call(data);\\r\\n      if (!sent)\\r\\n        revert MXCCollection__StakedTokenTransferFailed();\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(address spender,uint256 tokenId) internal view returns (bool) {\\r\\n      address owner = ERC721Upgrade.ownerOf(tokenId);\\r\\n      return (spender == owner || isApprovedForAll[owner][spender] || getApproved[tokenId] == spender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaefcb298db6e8cf9e71881a12b7a497db0fb0c1a03fe18bb4af07cb03dc3239c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506159b7806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063cbb3ce611462000033575b600080fd5b6200005160048036038101906200004b919062000491565b62000069565b60405162000060919062000612565b60405180910390f35b620000736200023d565b600060405162000083906200025f565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b509050600081635cf3ad3160e01b3387878a8d8d604051602401620000cb96959493929190620006da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000136906200026d565b62000143929190620007b2565b604051809103906000f08015801562000160573d6000803e3d6000fd5b50905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff59ec64249a367b8002b16800479bbc232553e6b3a132735ac8f9ca67d82cc9a60405160405180910390a360405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250935050505095945050505050565b6040518060400160405280600290602082028036833780820191505090505090565b61454a80620007e783390190565b610c518062004d3183390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002e48262000299565b810181811067ffffffffffffffff82111715620003065762000305620002aa565b5b80604052505050565b60006200031b6200027b565b9050620003298282620002d9565b919050565b600067ffffffffffffffff8211156200034c576200034b620002aa565b5b620003578262000299565b9050602081019050919050565b82818337600083830152505050565b60006200038a62000384846200032e565b6200030f565b905082815260208101848484011115620003a957620003a862000294565b5b620003b684828562000364565b509392505050565b600082601f830112620003d657620003d56200028f565b5b8135620003e884826020860162000373565b91505092915050565b6000819050919050565b6200040681620003f1565b81146200041257600080fd5b50565b6000813590506200042681620003fb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000459826200042c565b9050919050565b6200046b816200044c565b81146200047757600080fd5b50565b6000813590506200048b8162000460565b92915050565b600080600080600060a08688031215620004b057620004af62000285565b5b600086013567ffffffffffffffff811115620004d157620004d06200028a565b5b620004df88828901620003be565b955050602086013567ffffffffffffffff8111156200050357620005026200028a565b5b6200051188828901620003be565b9450506040620005248882890162000415565b935050606062000537888289016200047a565b92505060806200054a888289016200047a565b9150509295509295909350565b600060029050919050565b600081905092915050565b6000819050919050565b62000582816200044c565b82525050565b600062000596838362000577565b60208301905092915050565b6000602082019050919050565b620005ba8162000557565b620005c6818462000562565b9250620005d3826200056d565b8060005b838110156200060a578151620005ee878262000588565b9650620005fb83620005a2565b925050600181019050620005d7565b505050505050565b6000604082019050620006296000830184620005af565b92915050565b6200063a816200044c565b82525050565b6200064b81620003f1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200068d57808201518184015260208101905062000670565b60008484015250505050565b6000620006a68262000651565b620006b281856200065c565b9350620006c48185602086016200066d565b620006cf8162000299565b840191505092915050565b600060c082019050620006f160008301896200062f565b6200070060208301886200062f565b6200070f60408301876200062f565b6200071e606083018662000640565b818103608083015262000732818562000699565b905081810360a083015262000748818462000699565b9050979650505050505050565b600081519050919050565b600082825260208201905092915050565b60006200077e8262000755565b6200078a818562000760565b93506200079c8185602086016200066d565b620007a78162000299565b840191505092915050565b6000604082019050620007c960008301856200062f565b8181036020830152620007dd818462000771565b9050939250505056fe60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516144cf61007b60003960008181611033015281816110c101528181611368015281816113f601526114a601526144cf6000f3fe6080604052600436106101c25760003560e01c80634f1ef286116100f7578063aa04295f11610095578063cef6d36811610064578063cef6d36814610643578063d147c97a14610681578063d8dfeb45146106aa578063e985e9c5146106d5576101c2565b8063aa04295f14610575578063b88d4fde146105b2578063c87b56dd146105db578063ce2243b414610618576101c2565b80636352211e116100d15780636352211e146104a757806370a08231146104e457806395d89b4114610521578063a22cb4651461054c576101c2565b80634f1ef2861461043757806352d1902d146104535780635cf3ad311461047e576101c2565b806318160ddd116101645780633659cfe61161013e5780633659cfe61461039157806342842e0e146103ba57806342966c68146103e3578063486f6c3e1461040c576101c2565b806318160ddd1461031257806323b872dd1461033d578063343def0214610366576101c2565b806306fdde03116101a057806306fdde0314610258578063081812fc14610283578063095ea7b3146102c0578063162094c4146102e9576101c2565b806301ffc9a7146101c757806302d05d3f14610204578063056b01ce1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190612c8b565b610712565b6040516101fb9190612cd3565b60405180910390f35b34801561021057600080fd5b506102196107a4565b6040516102269190612d2f565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190612ec6565b6107ca565b005b34801561026457600080fd5b5061026d6108c4565b60405161027a9190612fa1565b60405180910390f35b34801561028f57600080fd5b506102aa60048036038101906102a59190612fc3565b610952565b6040516102b79190612d2f565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e2919061301c565b610985565b005b3480156102f557600080fd5b50610310600480360381019061030b919061305c565b610b6e565b005b34801561031e57600080fd5b50610327610c06565b60405161033491906130c7565b60405180910390f35b34801561034957600080fd5b50610364600480360381019061035f91906130e2565b610c0c565b005b34801561037257600080fd5b5061037b61100b565b6040516103889190612d2f565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190613135565b611031565b005b3480156103c657600080fd5b506103e160048036038101906103dc91906130e2565b6111b9565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190612fc3565b6112f1565b005b34801561041857600080fd5b50610421611360565b60405161042e91906130c7565b60405180910390f35b610451600480360381019061044c9190613203565b611366565b005b34801561045f57600080fd5b506104686114a2565b6040516104759190613278565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a09190613293565b61155b565b005b3480156104b357600080fd5b506104ce60048036038101906104c99190612fc3565b611773565b6040516104db9190612d2f565b60405180910390f35b3480156104f057600080fd5b5061050b60048036038101906105069190613135565b61181e565b60405161051891906130c7565b60405180910390f35b34801561052d57600080fd5b506105366118d5565b6040516105439190612fa1565b60405180910390f35b34801561055857600080fd5b50610573600480360381019061056e9190613384565b611963565b005b34801561058157600080fd5b5061059c60048036038101906105979190612fc3565b611a60565b6040516105a991906130c7565b60405180910390f35b3480156105be57600080fd5b506105d960048036038101906105d49190613424565b611a7d565b005b3480156105e757600080fd5b5061060260048036038101906105fd9190612fc3565b611bbb565b60405161060f9190612fa1565b60405180910390f35b34801561062457600080fd5b5061062d611c9f565b60405161063a91906130c7565b60405180910390f35b34801561064f57600080fd5b5061066a60048036038101906106659190612fc3565b611ca5565b6040516106789291906134ac565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a391906134d5565b611d07565b005b3480156106b657600080fd5b506106bf611e5f565b6040516106cc9190612d2f565b60405180910390f35b3480156106e157600080fd5b506106fc60048036038101906106f7919061354d565b611e85565b6040516107099190612cd3565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076d57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061079d5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610851576040517f62a0fdfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b5490506108623382611eb4565b61086c81836120c6565b6108768184610b6e565b6001606b5461088591906135bc565b606b819055506001606c600082825461089e91906135bc565b925050819055506001606d60008282546108b891906135bc565b92505081905550505050565b606580546108d19061361f565b80601f01602080910402602001604051908101604052809291908181526020018280546108fd9061361f565b801561094a5780601f1061091f5761010080835404028352916020019161094a565b820191906000526020600020905b81548152906001019060200180831161092d57829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a7d5750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab39061369c565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610b7983611773565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610be0576040517f11e7e2df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81607260008581526020019081526020016000209081610c009190613868565b50505050565b606c5481565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca490613986565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d13906139f2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ddc5750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610e4557506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b9061369c565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036110bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b690613a84565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110fe6120f7565b73ffffffffffffffffffffffffffffffffffffffff1614611154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114b90613b16565b60405180910390fd5b61115d8161214e565b6111b681600067ffffffffffffffff81111561117c5761117b612d65565b5b6040519080825280601f01601f1916602001820160405280156111ae5781602001600182028036833780820191505090505b506000612151565b50565b6111c4838383610c0c565b60008273ffffffffffffffffffffffffffffffffffffffff163b14806112ad575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b815260040161124993929190613b6d565b6020604051808303816000875af1158015611268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128c9190613bcc565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e390613c45565b60405180910390fd5b505050565b6112fb33826122bf565b611331576040517ff11def0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61133a816123ff565b611343816125c2565b6001606d60008282546113569190613c65565b9250508190555050565b606d5481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036113f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113eb90613a84565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114336120f7565b73ffffffffffffffffffffffffffffffffffffffff1614611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090613b16565b60405180910390fd5b6114928261214e565b61149e82826001612151565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990613d0b565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60008060019054906101000a900460ff1615905080801561158c5750600160008054906101000a900460ff1660ff16105b806115b9575061159b306125fb565b1580156115b85750600160008054906101000a900460ff1660ff16145b5b6115f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ef90613d9d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611635576001600060016101000a81548160ff0219169083151502179055505b83606e8190555085606f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506117098383611d07565b61171161261e565b801561176a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516117619190613e05565b60405180910390a15b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1603611819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181090613e6c565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361188e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188590613ed8565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606680546118e29061361f565b80601f016020809104026020016040519081016040528092919081815260200182805461190e9061361f565b801561195b5780601f106119305761010080835404028352916020019161195b565b820191906000526020600020905b81548152906001019060200180831161193e57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a549190612cd3565b60405180910390a35050565b600060736000838152602001908152602001600020549050919050565b611a88858585610c0c565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611b75575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611b11959493929190613f25565b6020604051808303816000875af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190613bcc565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bab90613c45565b60405180910390fd5b5050505050565b6060611bc68261266f565b611bfc576040517f661a032000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607260008381526020019081526020016000208054611c1a9061361f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c469061361f565b8015611c935780601f10611c6857610100808354040283529160200191611c93565b820191906000526020600020905b815481529060010190602001808311611c7657829003601f168201915b50505050509050919050565b606e5481565b6000806000606e541115611cfa57612710606e5484611cc49190613f73565b611cce9190613fe4565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150611d02565b600080915091505b915091565b60008060019054906101000a900460ff16159050808015611d385750600160008054906101000a900460ff1660ff16105b80611d655750611d47306125fb565b158015611d645750600160008054906101000a900460ff1660ff16145b5b611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b90613d9d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611de1576001600060016101000a81548160ff0219169083151502179055505b8260659081611df09190613868565b508160669081611e009190613868565b508015611e5a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611e519190613e05565b60405180910390a15b505050565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1a906139f2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc90614061565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008111156120db576120da3330836126b0565b5b8060736000848152602001908152602001600020819055505050565b60006121257f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61281a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b50565b61217d7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612824565b60000160009054906101000a900460ff16156121a15761219c8361282e565b6122ba565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561220957506040513d601f19601f8201168201806040525081019061220691906140ad565b60015b612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223f9061414c565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a4906141de565b60405180910390fd5b506122b98383836128e7565b5b505050565b6000806122cb83611773565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061238d5750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806123f657508373ffffffffffffffffffffffffffffffffffffffff166069600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249d90613e6c565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6125df336073600084815260200190815260200160002054612913565b6000607360008381526020019081526020016000208190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661266d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266490614270565b60405180910390fd5b565b60008073ffffffffffffffffffffffffffffffffffffffff1661269183611773565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b90506000818585856040516024016126ed93929190614290565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051612795919061430e565b6000604051808303816000865af19150503d80600081146127d2576040519150601f19603f3d011682016040523d82523d6000602084013e6127d7565b606091505b5050905080612812576040517f830ab5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000819050919050565b6000819050919050565b612837816125fb565b612876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286d90614397565b60405180910390fd5b806128a37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61281a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6128f083612a7a565b6000825111806128fd5750805b1561290e5761290c8383612ac9565b505b505050565b60007fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b9050600081848460405160240161294e9291906143b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516129f6919061430e565b6000604051808303816000865af19150503d8060008114612a33576040519150601f19603f3d011682016040523d82523d6000602084013e612a38565b606091505b5050905080612a73576040517f830ab5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b612a838161282e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612ad4836125fb565b612b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0a90614452565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612b3b919061430e565b600060405180830381855af49150503d8060008114612b76576040519150601f19603f3d011682016040523d82523d6000602084013e612b7b565b606091505b5091509150612ba3828260405180606001604052806027815260200161447360279139612bad565b9250505092915050565b60608315612bbd57829050612bc8565b612bc78383612bcf565b5b9392505050565b600082511115612be25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c169190612fa1565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c6881612c33565b8114612c7357600080fd5b50565b600081359050612c8581612c5f565b92915050565b600060208284031215612ca157612ca0612c29565b5b6000612caf84828501612c76565b91505092915050565b60008115159050919050565b612ccd81612cb8565b82525050565b6000602082019050612ce86000830184612cc4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d1982612cee565b9050919050565b612d2981612d0e565b82525050565b6000602082019050612d446000830184612d20565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d9d82612d54565b810181811067ffffffffffffffff82111715612dbc57612dbb612d65565b5b80604052505050565b6000612dcf612c1f565b9050612ddb8282612d94565b919050565b600067ffffffffffffffff821115612dfb57612dfa612d65565b5b612e0482612d54565b9050602081019050919050565b82818337600083830152505050565b6000612e33612e2e84612de0565b612dc5565b905082815260208101848484011115612e4f57612e4e612d4f565b5b612e5a848285612e11565b509392505050565b600082601f830112612e7757612e76612d4a565b5b8135612e87848260208601612e20565b91505092915050565b6000819050919050565b612ea381612e90565b8114612eae57600080fd5b50565b600081359050612ec081612e9a565b92915050565b60008060408385031215612edd57612edc612c29565b5b600083013567ffffffffffffffff811115612efb57612efa612c2e565b5b612f0785828601612e62565b9250506020612f1885828601612eb1565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f5c578082015181840152602081019050612f41565b60008484015250505050565b6000612f7382612f22565b612f7d8185612f2d565b9350612f8d818560208601612f3e565b612f9681612d54565b840191505092915050565b60006020820190508181036000830152612fbb8184612f68565b905092915050565b600060208284031215612fd957612fd8612c29565b5b6000612fe784828501612eb1565b91505092915050565b612ff981612d0e565b811461300457600080fd5b50565b60008135905061301681612ff0565b92915050565b6000806040838503121561303357613032612c29565b5b600061304185828601613007565b925050602061305285828601612eb1565b9150509250929050565b6000806040838503121561307357613072612c29565b5b600061308185828601612eb1565b925050602083013567ffffffffffffffff8111156130a2576130a1612c2e565b5b6130ae85828601612e62565b9150509250929050565b6130c181612e90565b82525050565b60006020820190506130dc60008301846130b8565b92915050565b6000806000606084860312156130fb576130fa612c29565b5b600061310986828701613007565b935050602061311a86828701613007565b925050604061312b86828701612eb1565b9150509250925092565b60006020828403121561314b5761314a612c29565b5b600061315984828501613007565b91505092915050565b600067ffffffffffffffff82111561317d5761317c612d65565b5b61318682612d54565b9050602081019050919050565b60006131a66131a184613162565b612dc5565b9050828152602081018484840111156131c2576131c1612d4f565b5b6131cd848285612e11565b509392505050565b600082601f8301126131ea576131e9612d4a565b5b81356131fa848260208601613193565b91505092915050565b6000806040838503121561321a57613219612c29565b5b600061322885828601613007565b925050602083013567ffffffffffffffff81111561324957613248612c2e565b5b613255858286016131d5565b9150509250929050565b6000819050919050565b6132728161325f565b82525050565b600060208201905061328d6000830184613269565b92915050565b60008060008060008060c087890312156132b0576132af612c29565b5b60006132be89828a01613007565b96505060206132cf89828a01613007565b95505060406132e089828a01613007565b94505060606132f189828a01612eb1565b935050608087013567ffffffffffffffff81111561331257613311612c2e565b5b61331e89828a01612e62565b92505060a087013567ffffffffffffffff81111561333f5761333e612c2e565b5b61334b89828a01612e62565b9150509295509295509295565b61336181612cb8565b811461336c57600080fd5b50565b60008135905061337e81613358565b92915050565b6000806040838503121561339b5761339a612c29565b5b60006133a985828601613007565b92505060206133ba8582860161336f565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126133e4576133e3612d4a565b5b8235905067ffffffffffffffff811115613401576134006133c4565b5b60208301915083600182028301111561341d5761341c6133c9565b5b9250929050565b6000806000806000608086880312156134405761343f612c29565b5b600061344e88828901613007565b955050602061345f88828901613007565b945050604061347088828901612eb1565b935050606086013567ffffffffffffffff81111561349157613490612c2e565b5b61349d888289016133ce565b92509250509295509295909350565b60006040820190506134c160008301856130b8565b6134ce6020830184612d20565b9392505050565b600080604083850312156134ec576134eb612c29565b5b600083013567ffffffffffffffff81111561350a57613509612c2e565b5b61351685828601612e62565b925050602083013567ffffffffffffffff81111561353757613536612c2e565b5b61354385828601612e62565b9150509250929050565b6000806040838503121561356457613563612c29565b5b600061357285828601613007565b925050602061358385828601613007565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135c782612e90565b91506135d283612e90565b92508282019050808211156135ea576135e961358d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061363757607f821691505b60208210810361364a576136496135f0565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000613686600e83612f2d565b915061369182613650565b602082019050919050565b600060208201905081810360008301526136b581613679565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261371e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136e1565b61372886836136e1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061376561376061375b84612e90565b613740565b612e90565b9050919050565b6000819050919050565b61377f8361374a565b61379361378b8261376c565b8484546136ee565b825550505050565b600090565b6137a861379b565b6137b3818484613776565b505050565b5b818110156137d7576137cc6000826137a0565b6001810190506137b9565b5050565b601f82111561381c576137ed816136bc565b6137f6846136d1565b81016020851015613805578190505b613819613811856136d1565b8301826137b8565b50505b505050565b600082821c905092915050565b600061383f60001984600802613821565b1980831691505092915050565b6000613858838361382e565b9150826002028217905092915050565b61387182612f22565b67ffffffffffffffff81111561388a57613889612d65565b5b613894825461361f565b61389f8282856137db565b600060209050601f8311600181146138d257600084156138c0578287015190505b6138ca858261384c565b865550613932565b601f1984166138e0866136bc565b60005b82811015613908578489015182556001820191506020850194506020810190506138e3565b868310156139255784890151613921601f89168261382e565b8355505b6001600288020188555050505b505050505050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000613970600a83612f2d565b915061397b8261393a565b602082019050919050565b6000602082019050818103600083015261399f81613963565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b60006139dc601183612f2d565b91506139e7826139a6565b602082019050919050565b60006020820190508181036000830152613a0b816139cf565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613a6e602c83612f2d565b9150613a7982613a12565b604082019050919050565b60006020820190508181036000830152613a9d81613a61565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613b00602c83612f2d565b9150613b0b82613aa4565b604082019050919050565b60006020820190508181036000830152613b2f81613af3565b9050919050565b600082825260208201905092915050565b50565b6000613b57600083613b36565b9150613b6282613b47565b600082019050919050565b6000608082019050613b826000830186612d20565b613b8f6020830185612d20565b613b9c60408301846130b8565b8181036060830152613bad81613b4a565b9050949350505050565b600081519050613bc681612c5f565b92915050565b600060208284031215613be257613be1612c29565b5b6000613bf084828501613bb7565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000613c2f601083612f2d565b9150613c3a82613bf9565b602082019050919050565b60006020820190508181036000830152613c5e81613c22565b9050919050565b6000613c7082612e90565b9150613c7b83612e90565b9250828203905081811115613c9357613c9261358d565b5b92915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613cf5603883612f2d565b9150613d0082613c99565b604082019050919050565b60006020820190508181036000830152613d2481613ce8565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613d87602e83612f2d565b9150613d9282613d2b565b604082019050919050565b60006020820190508181036000830152613db681613d7a565b9050919050565b6000819050919050565b600060ff82169050919050565b6000613def613dea613de584613dbd565b613740565b613dc7565b9050919050565b613dff81613dd4565b82525050565b6000602082019050613e1a6000830184613df6565b92915050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000613e56600a83612f2d565b9150613e6182613e20565b602082019050919050565b60006020820190508181036000830152613e8581613e49565b9050919050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b6000613ec2600c83612f2d565b9150613ecd82613e8c565b602082019050919050565b60006020820190508181036000830152613ef181613eb5565b9050919050565b6000613f048385613b36565b9350613f11838584612e11565b613f1a83612d54565b840190509392505050565b6000608082019050613f3a6000830188612d20565b613f476020830187612d20565b613f5460408301866130b8565b8181036060830152613f67818486613ef8565b90509695505050505050565b6000613f7e82612e90565b9150613f8983612e90565b9250828202613f9781612e90565b91508282048414831517613fae57613fad61358d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613fef82612e90565b9150613ffa83612e90565b92508261400a57614009613fb5565b5b828204905092915050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b600061404b600e83612f2d565b915061405682614015565b602082019050919050565b6000602082019050818103600083015261407a8161403e565b9050919050565b61408a8161325f565b811461409557600080fd5b50565b6000815190506140a781614081565b92915050565b6000602082840312156140c3576140c2612c29565b5b60006140d184828501614098565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614136602e83612f2d565b9150614141826140da565b604082019050919050565b6000602082019050818103600083015261416581614129565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006141c8602983612f2d565b91506141d38261416c565b604082019050919050565b600060208201905081810360008301526141f7816141bb565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061425a602b83612f2d565b9150614265826141fe565b604082019050919050565b600060208201905081810360008301526142898161424d565b9050919050565b60006060820190506142a56000830186612d20565b6142b26020830185612d20565b6142bf60408301846130b8565b949350505050565b600081519050919050565b600081905092915050565b60006142e8826142c7565b6142f281856142d2565b9350614302818560208601612f3e565b80840191505092915050565b600061431a82846142dd565b915081905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614381602d83612f2d565b915061438c82614325565b604082019050919050565b600060208201905081810360008301526143b081614374565b9050919050565b60006040820190506143cc6000830185612d20565b6143d960208301846130b8565b9392505050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061443c602683612f2d565b9150614447826143e0565b604082019050919050565b6000602082019050818103600083015261446b8161442f565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e624c546ced7b14bbba8c47e45bfd0588262f639be8390997734aa119a78f01f64736f6c63430008120033608060405260405162000c5138038062000c51833981810160405281019062000029919062000580565b6200003d828260006200004560201b60201c565b5050620007d7565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c2a60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000164906200066d565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006dc565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031a5760008351036200031157620002ce856200027d60201b60201c565b62000310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003079062000745565b60405180910390fd5b5b8290506200032d565b6200032c83836200033560201b60201c565b5b949350505050565b600082511115620003495781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037f9190620007b3565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c9826200039c565b9050919050565b620003db81620003bc565b8114620003e757600080fd5b50565b600081519050620003fb81620003d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000456826200040b565b810181811067ffffffffffffffff821117156200047857620004776200041c565b5b80604052505050565b60006200048d62000388565b90506200049b82826200044b565b919050565b600067ffffffffffffffff821115620004be57620004bd6200041c565b5b620004c9826200040b565b9050602081019050919050565b60005b83811015620004f6578082015181840152602081019050620004d9565b60008484015250505050565b6000620005196200051384620004a0565b62000481565b90508281526020810184848401111562000538576200053762000406565b5b62000545848285620004d6565b509392505050565b600082601f83011262000565576200056462000401565b5b81516200057784826020860162000502565b91505092915050565b600080604083850312156200059a576200059962000392565b5b6000620005aa85828601620003ea565b925050602083015167ffffffffffffffff811115620005ce57620005cd62000397565b5b620005dc858286016200054d565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000655602d83620005e6565b91506200066282620005f7565b604082019050919050565b60006020820190508181036000830152620006888162000646565b9050919050565b600081519050919050565b600081905092915050565b6000620006b2826200068f565b620006be81856200069a565b9350620006d0818560208601620004d6565b80840191505092915050565b6000620006ea8284620006a5565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006200072d601d83620005e6565b91506200073a82620006f5565b602082019050919050565b6000602082019050818103600083015262000760816200071e565b9050919050565b600081519050919050565b60006200077f8262000767565b6200078b8185620005e6565b93506200079d818560208601620004d6565b620007a8816200040b565b840191505092915050565b60006020820190508181036000830152620007cf818462000772565b905092915050565b61044380620007e76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103e7602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102db565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606083156102075760008351036101ff576101bf85610064565b6101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f59061034f565b60405180910390fd5b5b829050610212565b610211838361021a565b5b949350505050565b60008251111561022d5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026191906103c4565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b60006102b58261026a565b6102bf8185610275565b93506102cf818560208601610280565b80840191505092915050565b60006102e782846102aa565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610339601d836102f2565b915061034482610303565b602082019050919050565b600060208201905081810360008301526103688161032c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103968261036f565b6103a081856102f2565b93506103b0818560208601610280565b6103b98161037a565b840191505092915050565b600060208201905081810360008301526103de818461038b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202321a362273fbe14eb135551ea4a6b9d941fd4e2086c344c380c35622a53412364736f6c63430008120033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a89a01916cbe544f189cb19174fcb7146066a28a464d4607d8a2cc7d22c4830c64736f6c63430008120033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063cbb3ce611462000033575b600080fd5b6200005160048036038101906200004b919062000491565b62000069565b60405162000060919062000612565b60405180910390f35b620000736200023d565b600060405162000083906200025f565b604051809103906000f080158015620000a0573d6000803e3d6000fd5b509050600081635cf3ad3160e01b3387878a8d8d604051602401620000cb96959493929190620006da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000136906200026d565b62000143929190620007b2565b604051809103906000f08015801562000160573d6000803e3d6000fd5b50905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff59ec64249a367b8002b16800479bbc232553e6b3a132735ac8f9ca67d82cc9a60405160405180910390a360405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250935050505095945050505050565b6040518060400160405280600290602082028036833780820191505090505090565b61454a80620007e783390190565b610c518062004d3183390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002e48262000299565b810181811067ffffffffffffffff82111715620003065762000305620002aa565b5b80604052505050565b60006200031b6200027b565b9050620003298282620002d9565b919050565b600067ffffffffffffffff8211156200034c576200034b620002aa565b5b620003578262000299565b9050602081019050919050565b82818337600083830152505050565b60006200038a62000384846200032e565b6200030f565b905082815260208101848484011115620003a957620003a862000294565b5b620003b684828562000364565b509392505050565b600082601f830112620003d657620003d56200028f565b5b8135620003e884826020860162000373565b91505092915050565b6000819050919050565b6200040681620003f1565b81146200041257600080fd5b50565b6000813590506200042681620003fb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000459826200042c565b9050919050565b6200046b816200044c565b81146200047757600080fd5b50565b6000813590506200048b8162000460565b92915050565b600080600080600060a08688031215620004b057620004af62000285565b5b600086013567ffffffffffffffff811115620004d157620004d06200028a565b5b620004df88828901620003be565b955050602086013567ffffffffffffffff8111156200050357620005026200028a565b5b6200051188828901620003be565b9450506040620005248882890162000415565b935050606062000537888289016200047a565b92505060806200054a888289016200047a565b9150509295509295909350565b600060029050919050565b600081905092915050565b6000819050919050565b62000582816200044c565b82525050565b600062000596838362000577565b60208301905092915050565b6000602082019050919050565b620005ba8162000557565b620005c6818462000562565b9250620005d3826200056d565b8060005b838110156200060a578151620005ee878262000588565b9650620005fb83620005a2565b925050600181019050620005d7565b505050505050565b6000604082019050620006296000830184620005af565b92915050565b6200063a816200044c565b82525050565b6200064b81620003f1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200068d57808201518184015260208101905062000670565b60008484015250505050565b6000620006a68262000651565b620006b281856200065c565b9350620006c48185602086016200066d565b620006cf8162000299565b840191505092915050565b600060c082019050620006f160008301896200062f565b6200070060208301886200062f565b6200070f60408301876200062f565b6200071e606083018662000640565b818103608083015262000732818562000699565b905081810360a083015262000748818462000699565b9050979650505050505050565b600081519050919050565b600082825260208201905092915050565b60006200077e8262000755565b6200078a818562000760565b93506200079c8185602086016200066d565b620007a78162000299565b840191505092915050565b6000604082019050620007c960008301856200062f565b8181036020830152620007dd818462000771565b9050939250505056fe60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516144cf61007b60003960008181611033015281816110c101528181611368015281816113f601526114a601526144cf6000f3fe6080604052600436106101c25760003560e01c80634f1ef286116100f7578063aa04295f11610095578063cef6d36811610064578063cef6d36814610643578063d147c97a14610681578063d8dfeb45146106aa578063e985e9c5146106d5576101c2565b8063aa04295f14610575578063b88d4fde146105b2578063c87b56dd146105db578063ce2243b414610618576101c2565b80636352211e116100d15780636352211e146104a757806370a08231146104e457806395d89b4114610521578063a22cb4651461054c576101c2565b80634f1ef2861461043757806352d1902d146104535780635cf3ad311461047e576101c2565b806318160ddd116101645780633659cfe61161013e5780633659cfe61461039157806342842e0e146103ba57806342966c68146103e3578063486f6c3e1461040c576101c2565b806318160ddd1461031257806323b872dd1461033d578063343def0214610366576101c2565b806306fdde03116101a057806306fdde0314610258578063081812fc14610283578063095ea7b3146102c0578063162094c4146102e9576101c2565b806301ffc9a7146101c757806302d05d3f14610204578063056b01ce1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190612c8b565b610712565b6040516101fb9190612cd3565b60405180910390f35b34801561021057600080fd5b506102196107a4565b6040516102269190612d2f565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190612ec6565b6107ca565b005b34801561026457600080fd5b5061026d6108c4565b60405161027a9190612fa1565b60405180910390f35b34801561028f57600080fd5b506102aa60048036038101906102a59190612fc3565b610952565b6040516102b79190612d2f565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e2919061301c565b610985565b005b3480156102f557600080fd5b50610310600480360381019061030b919061305c565b610b6e565b005b34801561031e57600080fd5b50610327610c06565b60405161033491906130c7565b60405180910390f35b34801561034957600080fd5b50610364600480360381019061035f91906130e2565b610c0c565b005b34801561037257600080fd5b5061037b61100b565b6040516103889190612d2f565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190613135565b611031565b005b3480156103c657600080fd5b506103e160048036038101906103dc91906130e2565b6111b9565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190612fc3565b6112f1565b005b34801561041857600080fd5b50610421611360565b60405161042e91906130c7565b60405180910390f35b610451600480360381019061044c9190613203565b611366565b005b34801561045f57600080fd5b506104686114a2565b6040516104759190613278565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a09190613293565b61155b565b005b3480156104b357600080fd5b506104ce60048036038101906104c99190612fc3565b611773565b6040516104db9190612d2f565b60405180910390f35b3480156104f057600080fd5b5061050b60048036038101906105069190613135565b61181e565b60405161051891906130c7565b60405180910390f35b34801561052d57600080fd5b506105366118d5565b6040516105439190612fa1565b60405180910390f35b34801561055857600080fd5b50610573600480360381019061056e9190613384565b611963565b005b34801561058157600080fd5b5061059c60048036038101906105979190612fc3565b611a60565b6040516105a991906130c7565b60405180910390f35b3480156105be57600080fd5b506105d960048036038101906105d49190613424565b611a7d565b005b3480156105e757600080fd5b5061060260048036038101906105fd9190612fc3565b611bbb565b60405161060f9190612fa1565b60405180910390f35b34801561062457600080fd5b5061062d611c9f565b60405161063a91906130c7565b60405180910390f35b34801561064f57600080fd5b5061066a60048036038101906106659190612fc3565b611ca5565b6040516106789291906134ac565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a391906134d5565b611d07565b005b3480156106b657600080fd5b506106bf611e5f565b6040516106cc9190612d2f565b60405180910390f35b3480156106e157600080fd5b506106fc60048036038101906106f7919061354d565b611e85565b6040516107099190612cd3565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076d57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061079d5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610851576040517f62a0fdfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b5490506108623382611eb4565b61086c81836120c6565b6108768184610b6e565b6001606b5461088591906135bc565b606b819055506001606c600082825461089e91906135bc565b925050819055506001606d60008282546108b891906135bc565b92505081905550505050565b606580546108d19061361f565b80601f01602080910402602001604051908101604052809291908181526020018280546108fd9061361f565b801561094a5780601f1061091f5761010080835404028352916020019161094a565b820191906000526020600020905b81548152906001019060200180831161092d57829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a7d5750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab39061369c565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610b7983611773565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610be0576040517f11e7e2df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81607260008581526020019081526020016000209081610c009190613868565b50505050565b606c5481565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca490613986565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d13906139f2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ddc5750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610e4557506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b9061369c565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036110bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b690613a84565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110fe6120f7565b73ffffffffffffffffffffffffffffffffffffffff1614611154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114b90613b16565b60405180910390fd5b61115d8161214e565b6111b681600067ffffffffffffffff81111561117c5761117b612d65565b5b6040519080825280601f01601f1916602001820160405280156111ae5781602001600182028036833780820191505090505b506000612151565b50565b6111c4838383610c0c565b60008273ffffffffffffffffffffffffffffffffffffffff163b14806112ad575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b815260040161124993929190613b6d565b6020604051808303816000875af1158015611268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128c9190613bcc565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e390613c45565b60405180910390fd5b505050565b6112fb33826122bf565b611331576040517ff11def0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61133a816123ff565b611343816125c2565b6001606d60008282546113569190613c65565b9250508190555050565b606d5481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036113f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113eb90613a84565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114336120f7565b73ffffffffffffffffffffffffffffffffffffffff1614611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090613b16565b60405180910390fd5b6114928261214e565b61149e82826001612151565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990613d0b565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60008060019054906101000a900460ff1615905080801561158c5750600160008054906101000a900460ff1660ff16105b806115b9575061159b306125fb565b1580156115b85750600160008054906101000a900460ff1660ff16145b5b6115f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ef90613d9d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611635576001600060016101000a81548160ff0219169083151502179055505b83606e8190555085606f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506117098383611d07565b61171161261e565b801561176a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516117619190613e05565b60405180910390a15b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1603611819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181090613e6c565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361188e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188590613ed8565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606680546118e29061361f565b80601f016020809104026020016040519081016040528092919081815260200182805461190e9061361f565b801561195b5780601f106119305761010080835404028352916020019161195b565b820191906000526020600020905b81548152906001019060200180831161193e57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a549190612cd3565b60405180910390a35050565b600060736000838152602001908152602001600020549050919050565b611a88858585610c0c565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611b75575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611b11959493929190613f25565b6020604051808303816000875af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190613bcc565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bab90613c45565b60405180910390fd5b5050505050565b6060611bc68261266f565b611bfc576040517f661a032000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607260008381526020019081526020016000208054611c1a9061361f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c469061361f565b8015611c935780601f10611c6857610100808354040283529160200191611c93565b820191906000526020600020905b815481529060010190602001808311611c7657829003601f168201915b50505050509050919050565b606e5481565b6000806000606e541115611cfa57612710606e5484611cc49190613f73565b611cce9190613fe4565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150611d02565b600080915091505b915091565b60008060019054906101000a900460ff16159050808015611d385750600160008054906101000a900460ff1660ff16105b80611d655750611d47306125fb565b158015611d645750600160008054906101000a900460ff1660ff16145b5b611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b90613d9d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611de1576001600060016101000a81548160ff0219169083151502179055505b8260659081611df09190613868565b508160669081611e009190613868565b508015611e5a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611e519190613e05565b60405180910390a15b505050565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1a906139f2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc90614061565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008111156120db576120da3330836126b0565b5b8060736000848152602001908152602001600020819055505050565b60006121257f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61281a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b50565b61217d7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612824565b60000160009054906101000a900460ff16156121a15761219c8361282e565b6122ba565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561220957506040513d601f19601f8201168201806040525081019061220691906140ad565b60015b612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223f9061414c565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a4906141de565b60405180910390fd5b506122b98383836128e7565b5b505050565b6000806122cb83611773565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061238d5750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806123f657508373ffffffffffffffffffffffffffffffffffffffff166069600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249d90613e6c565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6125df336073600084815260200190815260200160002054612913565b6000607360008381526020019081526020016000208190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661266d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266490614270565b60405180910390fd5b565b60008073ffffffffffffffffffffffffffffffffffffffff1661269183611773565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b90506000818585856040516024016126ed93929190614290565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051612795919061430e565b6000604051808303816000865af19150503d80600081146127d2576040519150601f19603f3d011682016040523d82523d6000602084013e6127d7565b606091505b5050905080612812576040517f830ab5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000819050919050565b6000819050919050565b612837816125fb565b612876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286d90614397565b60405180910390fd5b806128a37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61281a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6128f083612a7a565b6000825111806128fd5750805b1561290e5761290c8383612ac9565b505b505050565b60007fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b9050600081848460405160240161294e9291906143b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516129f6919061430e565b6000604051808303816000865af19150503d8060008114612a33576040519150601f19603f3d011682016040523d82523d6000602084013e612a38565b606091505b5050905080612a73576040517f830ab5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b612a838161282e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612ad4836125fb565b612b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0a90614452565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612b3b919061430e565b600060405180830381855af49150503d8060008114612b76576040519150601f19603f3d011682016040523d82523d6000602084013e612b7b565b606091505b5091509150612ba3828260405180606001604052806027815260200161447360279139612bad565b9250505092915050565b60608315612bbd57829050612bc8565b612bc78383612bcf565b5b9392505050565b600082511115612be25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c169190612fa1565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c6881612c33565b8114612c7357600080fd5b50565b600081359050612c8581612c5f565b92915050565b600060208284031215612ca157612ca0612c29565b5b6000612caf84828501612c76565b91505092915050565b60008115159050919050565b612ccd81612cb8565b82525050565b6000602082019050612ce86000830184612cc4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d1982612cee565b9050919050565b612d2981612d0e565b82525050565b6000602082019050612d446000830184612d20565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d9d82612d54565b810181811067ffffffffffffffff82111715612dbc57612dbb612d65565b5b80604052505050565b6000612dcf612c1f565b9050612ddb8282612d94565b919050565b600067ffffffffffffffff821115612dfb57612dfa612d65565b5b612e0482612d54565b9050602081019050919050565b82818337600083830152505050565b6000612e33612e2e84612de0565b612dc5565b905082815260208101848484011115612e4f57612e4e612d4f565b5b612e5a848285612e11565b509392505050565b600082601f830112612e7757612e76612d4a565b5b8135612e87848260208601612e20565b91505092915050565b6000819050919050565b612ea381612e90565b8114612eae57600080fd5b50565b600081359050612ec081612e9a565b92915050565b60008060408385031215612edd57612edc612c29565b5b600083013567ffffffffffffffff811115612efb57612efa612c2e565b5b612f0785828601612e62565b9250506020612f1885828601612eb1565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f5c578082015181840152602081019050612f41565b60008484015250505050565b6000612f7382612f22565b612f7d8185612f2d565b9350612f8d818560208601612f3e565b612f9681612d54565b840191505092915050565b60006020820190508181036000830152612fbb8184612f68565b905092915050565b600060208284031215612fd957612fd8612c29565b5b6000612fe784828501612eb1565b91505092915050565b612ff981612d0e565b811461300457600080fd5b50565b60008135905061301681612ff0565b92915050565b6000806040838503121561303357613032612c29565b5b600061304185828601613007565b925050602061305285828601612eb1565b9150509250929050565b6000806040838503121561307357613072612c29565b5b600061308185828601612eb1565b925050602083013567ffffffffffffffff8111156130a2576130a1612c2e565b5b6130ae85828601612e62565b9150509250929050565b6130c181612e90565b82525050565b60006020820190506130dc60008301846130b8565b92915050565b6000806000606084860312156130fb576130fa612c29565b5b600061310986828701613007565b935050602061311a86828701613007565b925050604061312b86828701612eb1565b9150509250925092565b60006020828403121561314b5761314a612c29565b5b600061315984828501613007565b91505092915050565b600067ffffffffffffffff82111561317d5761317c612d65565b5b61318682612d54565b9050602081019050919050565b60006131a66131a184613162565b612dc5565b9050828152602081018484840111156131c2576131c1612d4f565b5b6131cd848285612e11565b509392505050565b600082601f8301126131ea576131e9612d4a565b5b81356131fa848260208601613193565b91505092915050565b6000806040838503121561321a57613219612c29565b5b600061322885828601613007565b925050602083013567ffffffffffffffff81111561324957613248612c2e565b5b613255858286016131d5565b9150509250929050565b6000819050919050565b6132728161325f565b82525050565b600060208201905061328d6000830184613269565b92915050565b60008060008060008060c087890312156132b0576132af612c29565b5b60006132be89828a01613007565b96505060206132cf89828a01613007565b95505060406132e089828a01613007565b94505060606132f189828a01612eb1565b935050608087013567ffffffffffffffff81111561331257613311612c2e565b5b61331e89828a01612e62565b92505060a087013567ffffffffffffffff81111561333f5761333e612c2e565b5b61334b89828a01612e62565b9150509295509295509295565b61336181612cb8565b811461336c57600080fd5b50565b60008135905061337e81613358565b92915050565b6000806040838503121561339b5761339a612c29565b5b60006133a985828601613007565b92505060206133ba8582860161336f565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126133e4576133e3612d4a565b5b8235905067ffffffffffffffff811115613401576134006133c4565b5b60208301915083600182028301111561341d5761341c6133c9565b5b9250929050565b6000806000806000608086880312156134405761343f612c29565b5b600061344e88828901613007565b955050602061345f88828901613007565b945050604061347088828901612eb1565b935050606086013567ffffffffffffffff81111561349157613490612c2e565b5b61349d888289016133ce565b92509250509295509295909350565b60006040820190506134c160008301856130b8565b6134ce6020830184612d20565b9392505050565b600080604083850312156134ec576134eb612c29565b5b600083013567ffffffffffffffff81111561350a57613509612c2e565b5b61351685828601612e62565b925050602083013567ffffffffffffffff81111561353757613536612c2e565b5b61354385828601612e62565b9150509250929050565b6000806040838503121561356457613563612c29565b5b600061357285828601613007565b925050602061358385828601613007565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135c782612e90565b91506135d283612e90565b92508282019050808211156135ea576135e961358d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061363757607f821691505b60208210810361364a576136496135f0565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000613686600e83612f2d565b915061369182613650565b602082019050919050565b600060208201905081810360008301526136b581613679565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261371e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136e1565b61372886836136e1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061376561376061375b84612e90565b613740565b612e90565b9050919050565b6000819050919050565b61377f8361374a565b61379361378b8261376c565b8484546136ee565b825550505050565b600090565b6137a861379b565b6137b3818484613776565b505050565b5b818110156137d7576137cc6000826137a0565b6001810190506137b9565b5050565b601f82111561381c576137ed816136bc565b6137f6846136d1565b81016020851015613805578190505b613819613811856136d1565b8301826137b8565b50505b505050565b600082821c905092915050565b600061383f60001984600802613821565b1980831691505092915050565b6000613858838361382e565b9150826002028217905092915050565b61387182612f22565b67ffffffffffffffff81111561388a57613889612d65565b5b613894825461361f565b61389f8282856137db565b600060209050601f8311600181146138d257600084156138c0578287015190505b6138ca858261384c565b865550613932565b601f1984166138e0866136bc565b60005b82811015613908578489015182556001820191506020850194506020810190506138e3565b868310156139255784890151613921601f89168261382e565b8355505b6001600288020188555050505b505050505050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000613970600a83612f2d565b915061397b8261393a565b602082019050919050565b6000602082019050818103600083015261399f81613963565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b60006139dc601183612f2d565b91506139e7826139a6565b602082019050919050565b60006020820190508181036000830152613a0b816139cf565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613a6e602c83612f2d565b9150613a7982613a12565b604082019050919050565b60006020820190508181036000830152613a9d81613a61565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613b00602c83612f2d565b9150613b0b82613aa4565b604082019050919050565b60006020820190508181036000830152613b2f81613af3565b9050919050565b600082825260208201905092915050565b50565b6000613b57600083613b36565b9150613b6282613b47565b600082019050919050565b6000608082019050613b826000830186612d20565b613b8f6020830185612d20565b613b9c60408301846130b8565b8181036060830152613bad81613b4a565b9050949350505050565b600081519050613bc681612c5f565b92915050565b600060208284031215613be257613be1612c29565b5b6000613bf084828501613bb7565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000613c2f601083612f2d565b9150613c3a82613bf9565b602082019050919050565b60006020820190508181036000830152613c5e81613c22565b9050919050565b6000613c7082612e90565b9150613c7b83612e90565b9250828203905081811115613c9357613c9261358d565b5b92915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613cf5603883612f2d565b9150613d0082613c99565b604082019050919050565b60006020820190508181036000830152613d2481613ce8565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613d87602e83612f2d565b9150613d9282613d2b565b604082019050919050565b60006020820190508181036000830152613db681613d7a565b9050919050565b6000819050919050565b600060ff82169050919050565b6000613def613dea613de584613dbd565b613740565b613dc7565b9050919050565b613dff81613dd4565b82525050565b6000602082019050613e1a6000830184613df6565b92915050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000613e56600a83612f2d565b9150613e6182613e20565b602082019050919050565b60006020820190508181036000830152613e8581613e49565b9050919050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b6000613ec2600c83612f2d565b9150613ecd82613e8c565b602082019050919050565b60006020820190508181036000830152613ef181613eb5565b9050919050565b6000613f048385613b36565b9350613f11838584612e11565b613f1a83612d54565b840190509392505050565b6000608082019050613f3a6000830188612d20565b613f476020830187612d20565b613f5460408301866130b8565b8181036060830152613f67818486613ef8565b90509695505050505050565b6000613f7e82612e90565b9150613f8983612e90565b9250828202613f9781612e90565b91508282048414831517613fae57613fad61358d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613fef82612e90565b9150613ffa83612e90565b92508261400a57614009613fb5565b5b828204905092915050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b600061404b600e83612f2d565b915061405682614015565b602082019050919050565b6000602082019050818103600083015261407a8161403e565b9050919050565b61408a8161325f565b811461409557600080fd5b50565b6000815190506140a781614081565b92915050565b6000602082840312156140c3576140c2612c29565b5b60006140d184828501614098565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614136602e83612f2d565b9150614141826140da565b604082019050919050565b6000602082019050818103600083015261416581614129565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006141c8602983612f2d565b91506141d38261416c565b604082019050919050565b600060208201905081810360008301526141f7816141bb565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061425a602b83612f2d565b9150614265826141fe565b604082019050919050565b600060208201905081810360008301526142898161424d565b9050919050565b60006060820190506142a56000830186612d20565b6142b26020830185612d20565b6142bf60408301846130b8565b949350505050565b600081519050919050565b600081905092915050565b60006142e8826142c7565b6142f281856142d2565b9350614302818560208601612f3e565b80840191505092915050565b600061431a82846142dd565b915081905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614381602d83612f2d565b915061438c82614325565b604082019050919050565b600060208201905081810360008301526143b081614374565b9050919050565b60006040820190506143cc6000830185612d20565b6143d960208301846130b8565b9392505050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061443c602683612f2d565b9150614447826143e0565b604082019050919050565b6000602082019050818103600083015261446b8161442f565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e624c546ced7b14bbba8c47e45bfd0588262f639be8390997734aa119a78f01f64736f6c63430008120033608060405260405162000c5138038062000c51833981810160405281019062000029919062000580565b6200003d828260006200004560201b60201c565b5050620007d7565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c2a60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000164906200066d565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006dc565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031a5760008351036200031157620002ce856200027d60201b60201c565b62000310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003079062000745565b60405180910390fd5b5b8290506200032d565b6200032c83836200033560201b60201c565b5b949350505050565b600082511115620003495781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037f9190620007b3565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c9826200039c565b9050919050565b620003db81620003bc565b8114620003e757600080fd5b50565b600081519050620003fb81620003d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000456826200040b565b810181811067ffffffffffffffff821117156200047857620004776200041c565b5b80604052505050565b60006200048d62000388565b90506200049b82826200044b565b919050565b600067ffffffffffffffff821115620004be57620004bd6200041c565b5b620004c9826200040b565b9050602081019050919050565b60005b83811015620004f6578082015181840152602081019050620004d9565b60008484015250505050565b6000620005196200051384620004a0565b62000481565b90508281526020810184848401111562000538576200053762000406565b5b62000545848285620004d6565b509392505050565b600082601f83011262000565576200056462000401565b5b81516200057784826020860162000502565b91505092915050565b600080604083850312156200059a576200059962000392565b5b6000620005aa85828601620003ea565b925050602083015167ffffffffffffffff811115620005ce57620005cd62000397565b5b620005dc858286016200054d565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000655602d83620005e6565b91506200066282620005f7565b604082019050919050565b60006020820190508181036000830152620006888162000646565b9050919050565b600081519050919050565b600081905092915050565b6000620006b2826200068f565b620006be81856200069a565b9350620006d0818560208601620004d6565b80840191505092915050565b6000620006ea8284620006a5565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006200072d601d83620005e6565b91506200073a82620006f5565b602082019050919050565b6000602082019050818103600083015262000760816200071e565b9050919050565b600081519050919050565b60006200077f8262000767565b6200078b8185620005e6565b93506200079d818560208601620004d6565b620007a8816200040b565b840191505092915050565b60006020820190508181036000830152620007cf818462000772565b905092915050565b61044380620007e76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103e7602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102db565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606083156102075760008351036101ff576101bf85610064565b6101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f59061034f565b60405180910390fd5b5b829050610212565b610211838361021a565b5b949350505050565b60008251111561022d5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026191906103c4565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b60006102b58261026a565b6102bf8185610275565b93506102cf818560208601610280565b80840191505092915050565b60006102e782846102aa565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610339601d836102f2565b915061034482610303565b602082019050919050565b600060208201905081810360008301526103688161032c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103968261036f565b6103a081856102f2565b93506103b0818560208601610280565b6103b98161037a565b840191505092915050565b600060208201905081810360008301526103de818461038b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202321a362273fbe14eb135551ea4a6b9d941fd4e2086c344c380c35622a53412364736f6c63430008120033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a89a01916cbe544f189cb19174fcb7146066a28a464d4607d8a2cc7d22c4830c64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}